// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SupplierP.proto

#ifndef PROTOBUF_SupplierP_2eproto__INCLUDED
#define PROTOBUF_SupplierP_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SupplierP_2eproto();
void protobuf_AssignDesc_SupplierP_2eproto();
void protobuf_ShutdownFile_SupplierP_2eproto();

class SupplierP;

// ===================================================================

class SupplierP : public ::google::protobuf::Message {
 public:
  SupplierP();
  virtual ~SupplierP();

  SupplierP(const SupplierP& from);

  inline SupplierP& operator=(const SupplierP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SupplierP& default_instance();

  void Swap(SupplierP* other);

  // implements Message ----------------------------------------------

  SupplierP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SupplierP& from);
  void MergeFrom(const SupplierP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 supplierKey = 1;
  inline bool has_supplierkey() const;
  inline void clear_supplierkey();
  static const int kSupplierKeyFieldNumber = 1;
  inline ::google::protobuf::int32 supplierkey() const;
  inline void set_supplierkey(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string address = 3;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 3;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // required int32 nationKey = 4;
  inline bool has_nationkey() const;
  inline void clear_nationkey();
  static const int kNationKeyFieldNumber = 4;
  inline ::google::protobuf::int32 nationkey() const;
  inline void set_nationkey(::google::protobuf::int32 value);

  // required string phone = 5;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 5;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // required double accbal = 6;
  inline bool has_accbal() const;
  inline void clear_accbal();
  static const int kAccbalFieldNumber = 6;
  inline double accbal() const;
  inline void set_accbal(double value);

  // required string comment = 7;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 7;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // @@protoc_insertion_point(class_scope:proto.SupplierP)
 private:
  inline void set_has_supplierkey();
  inline void clear_has_supplierkey();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_nationkey();
  inline void clear_has_nationkey();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_accbal();
  inline void clear_has_accbal();
  inline void set_has_comment();
  inline void clear_has_comment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 supplierkey_;
  ::google::protobuf::int32 nationkey_;
  ::std::string* address_;
  ::std::string* phone_;
  double accbal_;
  ::std::string* comment_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_SupplierP_2eproto();
  friend void protobuf_AssignDesc_SupplierP_2eproto();
  friend void protobuf_ShutdownFile_SupplierP_2eproto();

  void InitAsDefaultInstance();
  static SupplierP* default_instance_;
};
// ===================================================================


// ===================================================================

// SupplierP

// required int32 supplierKey = 1;
inline bool SupplierP::has_supplierkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SupplierP::set_has_supplierkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SupplierP::clear_has_supplierkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SupplierP::clear_supplierkey() {
  supplierkey_ = 0;
  clear_has_supplierkey();
}
inline ::google::protobuf::int32 SupplierP::supplierkey() const {
  return supplierkey_;
}
inline void SupplierP::set_supplierkey(::google::protobuf::int32 value) {
  set_has_supplierkey();
  supplierkey_ = value;
}

// required string name = 2;
inline bool SupplierP::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SupplierP::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SupplierP::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SupplierP::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SupplierP::name() const {
  return *name_;
}
inline void SupplierP::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SupplierP::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SupplierP::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SupplierP::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SupplierP::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SupplierP::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string address = 3;
inline bool SupplierP::has_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SupplierP::set_has_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SupplierP::clear_has_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SupplierP::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& SupplierP::address() const {
  return *address_;
}
inline void SupplierP::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void SupplierP::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void SupplierP::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SupplierP::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* SupplierP::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SupplierP::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 nationKey = 4;
inline bool SupplierP::has_nationkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SupplierP::set_has_nationkey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SupplierP::clear_has_nationkey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SupplierP::clear_nationkey() {
  nationkey_ = 0;
  clear_has_nationkey();
}
inline ::google::protobuf::int32 SupplierP::nationkey() const {
  return nationkey_;
}
inline void SupplierP::set_nationkey(::google::protobuf::int32 value) {
  set_has_nationkey();
  nationkey_ = value;
}

// required string phone = 5;
inline bool SupplierP::has_phone() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SupplierP::set_has_phone() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SupplierP::clear_has_phone() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SupplierP::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& SupplierP::phone() const {
  return *phone_;
}
inline void SupplierP::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void SupplierP::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void SupplierP::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SupplierP::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* SupplierP::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SupplierP::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double accbal = 6;
inline bool SupplierP::has_accbal() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SupplierP::set_has_accbal() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SupplierP::clear_has_accbal() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SupplierP::clear_accbal() {
  accbal_ = 0;
  clear_has_accbal();
}
inline double SupplierP::accbal() const {
  return accbal_;
}
inline void SupplierP::set_accbal(double value) {
  set_has_accbal();
  accbal_ = value;
}

// required string comment = 7;
inline bool SupplierP::has_comment() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SupplierP::set_has_comment() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SupplierP::clear_has_comment() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SupplierP::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& SupplierP::comment() const {
  return *comment_;
}
inline void SupplierP::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void SupplierP::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void SupplierP::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SupplierP::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* SupplierP::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SupplierP::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SupplierP_2eproto__INCLUDED
