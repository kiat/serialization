// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PartP.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PartP.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* PartP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartP_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PartP_2eproto() {
  protobuf_AddDesc_PartP_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PartP.proto");
  GOOGLE_CHECK(file != NULL);
  PartP_descriptor_ = file->message_type(0);
  static const int PartP_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartP, partkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartP, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartP, mfgr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartP, brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartP, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartP, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartP, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartP, retailprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartP, comment_),
  };
  PartP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PartP_descriptor_,
      PartP::default_instance_,
      PartP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PartP));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PartP_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PartP_descriptor_, &PartP::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PartP_2eproto() {
  delete PartP::default_instance_;
  delete PartP_reflection_;
}

void protobuf_AddDesc_PartP_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013PartP.proto\022\005proto\"\230\001\n\005PartP\022\017\n\007partKe"
    "y\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\014\n\004mfgr\030\003 \002(\t\022\r\n\005b"
    "rand\030\004 \002(\t\022\014\n\004type\030\005 \002(\t\022\014\n\004size\030\006 \002(\005\022\021"
    "\n\tcontainer\030\007 \002(\t\022\023\n\013retailPrice\030\010 \002(\001\022\017"
    "\n\007comment\030\t \002(\t", 175);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PartP.proto", &protobuf_RegisterTypes);
  PartP::default_instance_ = new PartP();
  PartP::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PartP_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PartP_2eproto {
  StaticDescriptorInitializer_PartP_2eproto() {
    protobuf_AddDesc_PartP_2eproto();
  }
} static_descriptor_initializer_PartP_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PartP::kPartKeyFieldNumber;
const int PartP::kNameFieldNumber;
const int PartP::kMfgrFieldNumber;
const int PartP::kBrandFieldNumber;
const int PartP::kTypeFieldNumber;
const int PartP::kSizeFieldNumber;
const int PartP::kContainerFieldNumber;
const int PartP::kRetailPriceFieldNumber;
const int PartP::kCommentFieldNumber;
#endif  // !_MSC_VER

PartP::PartP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PartP::InitAsDefaultInstance() {
}

PartP::PartP(const PartP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PartP::SharedCtor() {
  _cached_size_ = 0;
  partkey_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mfgr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = 0;
  container_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  retailprice_ = 0;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartP::~PartP() {
  SharedDtor();
}

void PartP::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (mfgr_ != &::google::protobuf::internal::kEmptyString) {
    delete mfgr_;
  }
  if (brand_ != &::google::protobuf::internal::kEmptyString) {
    delete brand_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (container_ != &::google::protobuf::internal::kEmptyString) {
    delete container_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void PartP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartP_descriptor_;
}

const PartP& PartP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PartP_2eproto();
  return *default_instance_;
}

PartP* PartP::default_instance_ = NULL;

PartP* PartP::New() const {
  return new PartP;
}

void PartP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    partkey_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_mfgr()) {
      if (mfgr_ != &::google::protobuf::internal::kEmptyString) {
        mfgr_->clear();
      }
    }
    if (has_brand()) {
      if (brand_ != &::google::protobuf::internal::kEmptyString) {
        brand_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    size_ = 0;
    if (has_container()) {
      if (container_ != &::google::protobuf::internal::kEmptyString) {
        container_->clear();
      }
    }
    retailprice_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PartP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 partKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partkey_)));
          set_has_partkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mfgr;
        break;
      }

      // required string mfgr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mfgr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mfgr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mfgr().data(), this->mfgr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_brand;
        break;
      }

      // required string brand = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brand().data(), this->brand().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_type;
        break;
      }

      // required string type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_size;
        break;
      }

      // required int32 size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_container;
        break;
      }

      // required string container = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_container()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->container().data(), this->container().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_retailPrice;
        break;
      }

      // required double retailPrice = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_retailPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &retailprice_)));
          set_has_retailprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_comment;
        break;
      }

      // required string comment = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PartP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 partKey = 1;
  if (has_partkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->partkey(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string mfgr = 3;
  if (has_mfgr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mfgr().data(), this->mfgr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mfgr(), output);
  }

  // required string brand = 4;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->brand(), output);
  }

  // required string type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->type(), output);
  }

  // required int32 size = 6;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->size(), output);
  }

  // required string container = 7;
  if (has_container()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->container().data(), this->container().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->container(), output);
  }

  // required double retailPrice = 8;
  if (has_retailprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->retailprice(), output);
  }

  // required string comment = 9;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->comment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PartP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 partKey = 1;
  if (has_partkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->partkey(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string mfgr = 3;
  if (has_mfgr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mfgr().data(), this->mfgr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mfgr(), target);
  }

  // required string brand = 4;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->brand(), target);
  }

  // required string type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->type(), target);
  }

  // required int32 size = 6;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->size(), target);
  }

  // required string container = 7;
  if (has_container()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->container().data(), this->container().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->container(), target);
  }

  // required double retailPrice = 8;
  if (has_retailprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->retailprice(), target);
  }

  // required string comment = 9;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->comment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PartP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 partKey = 1;
    if (has_partkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partkey());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string mfgr = 3;
    if (has_mfgr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mfgr());
    }

    // required string brand = 4;
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brand());
    }

    // required string type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required int32 size = 6;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // required string container = 7;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->container());
    }

    // required double retailPrice = 8;
    if (has_retailprice()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string comment = 9;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PartP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PartP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PartP::MergeFrom(const PartP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partkey()) {
      set_partkey(from.partkey());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mfgr()) {
      set_mfgr(from.mfgr());
    }
    if (from.has_brand()) {
      set_brand(from.brand());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_container()) {
      set_container(from.container());
    }
    if (from.has_retailprice()) {
      set_retailprice(from.retailprice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PartP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartP::CopyFrom(const PartP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartP::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void PartP::Swap(PartP* other) {
  if (other != this) {
    std::swap(partkey_, other->partkey_);
    std::swap(name_, other->name_);
    std::swap(mfgr_, other->mfgr_);
    std::swap(brand_, other->brand_);
    std::swap(type_, other->type_);
    std::swap(size_, other->size_);
    std::swap(container_, other->container_);
    std::swap(retailprice_, other->retailprice_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PartP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartP_descriptor_;
  metadata.reflection = PartP_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
