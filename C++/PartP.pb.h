// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PartP.proto

#ifndef PROTOBUF_PartP_2eproto__INCLUDED
#define PROTOBUF_PartP_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PartP_2eproto();
void protobuf_AssignDesc_PartP_2eproto();
void protobuf_ShutdownFile_PartP_2eproto();

class PartP;

// ===================================================================

class PartP : public ::google::protobuf::Message {
 public:
  PartP();
  virtual ~PartP();

  PartP(const PartP& from);

  inline PartP& operator=(const PartP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PartP& default_instance();

  void Swap(PartP* other);

  // implements Message ----------------------------------------------

  PartP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PartP& from);
  void MergeFrom(const PartP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 partKey = 1;
  inline bool has_partkey() const;
  inline void clear_partkey();
  static const int kPartKeyFieldNumber = 1;
  inline ::google::protobuf::int32 partkey() const;
  inline void set_partkey(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string mfgr = 3;
  inline bool has_mfgr() const;
  inline void clear_mfgr();
  static const int kMfgrFieldNumber = 3;
  inline const ::std::string& mfgr() const;
  inline void set_mfgr(const ::std::string& value);
  inline void set_mfgr(const char* value);
  inline void set_mfgr(const char* value, size_t size);
  inline ::std::string* mutable_mfgr();
  inline ::std::string* release_mfgr();
  inline void set_allocated_mfgr(::std::string* mfgr);

  // required string brand = 4;
  inline bool has_brand() const;
  inline void clear_brand();
  static const int kBrandFieldNumber = 4;
  inline const ::std::string& brand() const;
  inline void set_brand(const ::std::string& value);
  inline void set_brand(const char* value);
  inline void set_brand(const char* value, size_t size);
  inline ::std::string* mutable_brand();
  inline ::std::string* release_brand();
  inline void set_allocated_brand(::std::string* brand);

  // required string type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required int32 size = 6;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 6;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // required string container = 7;
  inline bool has_container() const;
  inline void clear_container();
  static const int kContainerFieldNumber = 7;
  inline const ::std::string& container() const;
  inline void set_container(const ::std::string& value);
  inline void set_container(const char* value);
  inline void set_container(const char* value, size_t size);
  inline ::std::string* mutable_container();
  inline ::std::string* release_container();
  inline void set_allocated_container(::std::string* container);

  // required double retailPrice = 8;
  inline bool has_retailprice() const;
  inline void clear_retailprice();
  static const int kRetailPriceFieldNumber = 8;
  inline double retailprice() const;
  inline void set_retailprice(double value);

  // required string comment = 9;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 9;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // @@protoc_insertion_point(class_scope:proto.PartP)
 private:
  inline void set_has_partkey();
  inline void clear_has_partkey();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_mfgr();
  inline void clear_has_mfgr();
  inline void set_has_brand();
  inline void clear_has_brand();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_container();
  inline void clear_has_container();
  inline void set_has_retailprice();
  inline void clear_has_retailprice();
  inline void set_has_comment();
  inline void clear_has_comment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* mfgr_;
  ::google::protobuf::int32 partkey_;
  ::google::protobuf::int32 size_;
  ::std::string* brand_;
  ::std::string* type_;
  ::std::string* container_;
  double retailprice_;
  ::std::string* comment_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_PartP_2eproto();
  friend void protobuf_AssignDesc_PartP_2eproto();
  friend void protobuf_ShutdownFile_PartP_2eproto();

  void InitAsDefaultInstance();
  static PartP* default_instance_;
};
// ===================================================================


// ===================================================================

// PartP

// required int32 partKey = 1;
inline bool PartP::has_partkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PartP::set_has_partkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PartP::clear_has_partkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PartP::clear_partkey() {
  partkey_ = 0;
  clear_has_partkey();
}
inline ::google::protobuf::int32 PartP::partkey() const {
  return partkey_;
}
inline void PartP::set_partkey(::google::protobuf::int32 value) {
  set_has_partkey();
  partkey_ = value;
}

// required string name = 2;
inline bool PartP::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PartP::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PartP::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PartP::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PartP::name() const {
  return *name_;
}
inline void PartP::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PartP::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PartP::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PartP::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PartP::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PartP::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string mfgr = 3;
inline bool PartP::has_mfgr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PartP::set_has_mfgr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PartP::clear_has_mfgr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PartP::clear_mfgr() {
  if (mfgr_ != &::google::protobuf::internal::kEmptyString) {
    mfgr_->clear();
  }
  clear_has_mfgr();
}
inline const ::std::string& PartP::mfgr() const {
  return *mfgr_;
}
inline void PartP::set_mfgr(const ::std::string& value) {
  set_has_mfgr();
  if (mfgr_ == &::google::protobuf::internal::kEmptyString) {
    mfgr_ = new ::std::string;
  }
  mfgr_->assign(value);
}
inline void PartP::set_mfgr(const char* value) {
  set_has_mfgr();
  if (mfgr_ == &::google::protobuf::internal::kEmptyString) {
    mfgr_ = new ::std::string;
  }
  mfgr_->assign(value);
}
inline void PartP::set_mfgr(const char* value, size_t size) {
  set_has_mfgr();
  if (mfgr_ == &::google::protobuf::internal::kEmptyString) {
    mfgr_ = new ::std::string;
  }
  mfgr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PartP::mutable_mfgr() {
  set_has_mfgr();
  if (mfgr_ == &::google::protobuf::internal::kEmptyString) {
    mfgr_ = new ::std::string;
  }
  return mfgr_;
}
inline ::std::string* PartP::release_mfgr() {
  clear_has_mfgr();
  if (mfgr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mfgr_;
    mfgr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PartP::set_allocated_mfgr(::std::string* mfgr) {
  if (mfgr_ != &::google::protobuf::internal::kEmptyString) {
    delete mfgr_;
  }
  if (mfgr) {
    set_has_mfgr();
    mfgr_ = mfgr;
  } else {
    clear_has_mfgr();
    mfgr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string brand = 4;
inline bool PartP::has_brand() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PartP::set_has_brand() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PartP::clear_has_brand() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PartP::clear_brand() {
  if (brand_ != &::google::protobuf::internal::kEmptyString) {
    brand_->clear();
  }
  clear_has_brand();
}
inline const ::std::string& PartP::brand() const {
  return *brand_;
}
inline void PartP::set_brand(const ::std::string& value) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::kEmptyString) {
    brand_ = new ::std::string;
  }
  brand_->assign(value);
}
inline void PartP::set_brand(const char* value) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::kEmptyString) {
    brand_ = new ::std::string;
  }
  brand_->assign(value);
}
inline void PartP::set_brand(const char* value, size_t size) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::kEmptyString) {
    brand_ = new ::std::string;
  }
  brand_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PartP::mutable_brand() {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::kEmptyString) {
    brand_ = new ::std::string;
  }
  return brand_;
}
inline ::std::string* PartP::release_brand() {
  clear_has_brand();
  if (brand_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = brand_;
    brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PartP::set_allocated_brand(::std::string* brand) {
  if (brand_ != &::google::protobuf::internal::kEmptyString) {
    delete brand_;
  }
  if (brand) {
    set_has_brand();
    brand_ = brand;
  } else {
    clear_has_brand();
    brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string type = 5;
inline bool PartP::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PartP::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PartP::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PartP::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& PartP::type() const {
  return *type_;
}
inline void PartP::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void PartP::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void PartP::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PartP::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* PartP::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PartP::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 size = 6;
inline bool PartP::has_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PartP::set_has_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PartP::clear_has_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PartP::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 PartP::size() const {
  return size_;
}
inline void PartP::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// required string container = 7;
inline bool PartP::has_container() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PartP::set_has_container() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PartP::clear_has_container() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PartP::clear_container() {
  if (container_ != &::google::protobuf::internal::kEmptyString) {
    container_->clear();
  }
  clear_has_container();
}
inline const ::std::string& PartP::container() const {
  return *container_;
}
inline void PartP::set_container(const ::std::string& value) {
  set_has_container();
  if (container_ == &::google::protobuf::internal::kEmptyString) {
    container_ = new ::std::string;
  }
  container_->assign(value);
}
inline void PartP::set_container(const char* value) {
  set_has_container();
  if (container_ == &::google::protobuf::internal::kEmptyString) {
    container_ = new ::std::string;
  }
  container_->assign(value);
}
inline void PartP::set_container(const char* value, size_t size) {
  set_has_container();
  if (container_ == &::google::protobuf::internal::kEmptyString) {
    container_ = new ::std::string;
  }
  container_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PartP::mutable_container() {
  set_has_container();
  if (container_ == &::google::protobuf::internal::kEmptyString) {
    container_ = new ::std::string;
  }
  return container_;
}
inline ::std::string* PartP::release_container() {
  clear_has_container();
  if (container_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = container_;
    container_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PartP::set_allocated_container(::std::string* container) {
  if (container_ != &::google::protobuf::internal::kEmptyString) {
    delete container_;
  }
  if (container) {
    set_has_container();
    container_ = container;
  } else {
    clear_has_container();
    container_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double retailPrice = 8;
inline bool PartP::has_retailprice() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PartP::set_has_retailprice() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PartP::clear_has_retailprice() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PartP::clear_retailprice() {
  retailprice_ = 0;
  clear_has_retailprice();
}
inline double PartP::retailprice() const {
  return retailprice_;
}
inline void PartP::set_retailprice(double value) {
  set_has_retailprice();
  retailprice_ = value;
}

// required string comment = 9;
inline bool PartP::has_comment() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PartP::set_has_comment() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PartP::clear_has_comment() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PartP::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& PartP::comment() const {
  return *comment_;
}
inline void PartP::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void PartP::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void PartP::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PartP::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* PartP::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PartP::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PartP_2eproto__INCLUDED
