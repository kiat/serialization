// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LineItemP.proto

#ifndef PROTOBUF_LineItemP_2eproto__INCLUDED
#define PROTOBUF_LineItemP_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LineItemP_2eproto();
void protobuf_AssignDesc_LineItemP_2eproto();
void protobuf_ShutdownFile_LineItemP_2eproto();

class LineItemP;
class LineItemP_SupplierP;
class LineItemP_PartP;

// ===================================================================

class LineItemP_SupplierP : public ::google::protobuf::Message {
 public:
  LineItemP_SupplierP();
  virtual ~LineItemP_SupplierP();

  LineItemP_SupplierP(const LineItemP_SupplierP& from);

  inline LineItemP_SupplierP& operator=(const LineItemP_SupplierP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LineItemP_SupplierP& default_instance();

  void Swap(LineItemP_SupplierP* other);

  // implements Message ----------------------------------------------

  LineItemP_SupplierP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LineItemP_SupplierP& from);
  void MergeFrom(const LineItemP_SupplierP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 supplierKey = 1;
  inline bool has_supplierkey() const;
  inline void clear_supplierkey();
  static const int kSupplierKeyFieldNumber = 1;
  inline ::google::protobuf::int32 supplierkey() const;
  inline void set_supplierkey(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string address = 3;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 3;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // required int32 nationKey = 4;
  inline bool has_nationkey() const;
  inline void clear_nationkey();
  static const int kNationKeyFieldNumber = 4;
  inline ::google::protobuf::int32 nationkey() const;
  inline void set_nationkey(::google::protobuf::int32 value);

  // required string phone = 5;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 5;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // required double accbal = 6;
  inline bool has_accbal() const;
  inline void clear_accbal();
  static const int kAccbalFieldNumber = 6;
  inline double accbal() const;
  inline void set_accbal(double value);

  // required string comment = 7;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 7;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // @@protoc_insertion_point(class_scope:proto.LineItemP.SupplierP)
 private:
  inline void set_has_supplierkey();
  inline void clear_has_supplierkey();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_nationkey();
  inline void clear_has_nationkey();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_accbal();
  inline void clear_has_accbal();
  inline void set_has_comment();
  inline void clear_has_comment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 supplierkey_;
  ::google::protobuf::int32 nationkey_;
  ::std::string* address_;
  ::std::string* phone_;
  double accbal_;
  ::std::string* comment_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_LineItemP_2eproto();
  friend void protobuf_AssignDesc_LineItemP_2eproto();
  friend void protobuf_ShutdownFile_LineItemP_2eproto();

  void InitAsDefaultInstance();
  static LineItemP_SupplierP* default_instance_;
};
// -------------------------------------------------------------------

class LineItemP_PartP : public ::google::protobuf::Message {
 public:
  LineItemP_PartP();
  virtual ~LineItemP_PartP();

  LineItemP_PartP(const LineItemP_PartP& from);

  inline LineItemP_PartP& operator=(const LineItemP_PartP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LineItemP_PartP& default_instance();

  void Swap(LineItemP_PartP* other);

  // implements Message ----------------------------------------------

  LineItemP_PartP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LineItemP_PartP& from);
  void MergeFrom(const LineItemP_PartP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 partKey = 1;
  inline bool has_partkey() const;
  inline void clear_partkey();
  static const int kPartKeyFieldNumber = 1;
  inline ::google::protobuf::int32 partkey() const;
  inline void set_partkey(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string mfgr = 3;
  inline bool has_mfgr() const;
  inline void clear_mfgr();
  static const int kMfgrFieldNumber = 3;
  inline const ::std::string& mfgr() const;
  inline void set_mfgr(const ::std::string& value);
  inline void set_mfgr(const char* value);
  inline void set_mfgr(const char* value, size_t size);
  inline ::std::string* mutable_mfgr();
  inline ::std::string* release_mfgr();
  inline void set_allocated_mfgr(::std::string* mfgr);

  // required string brand = 4;
  inline bool has_brand() const;
  inline void clear_brand();
  static const int kBrandFieldNumber = 4;
  inline const ::std::string& brand() const;
  inline void set_brand(const ::std::string& value);
  inline void set_brand(const char* value);
  inline void set_brand(const char* value, size_t size);
  inline ::std::string* mutable_brand();
  inline ::std::string* release_brand();
  inline void set_allocated_brand(::std::string* brand);

  // required string type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // required int32 size = 6;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 6;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // required string container = 7;
  inline bool has_container() const;
  inline void clear_container();
  static const int kContainerFieldNumber = 7;
  inline const ::std::string& container() const;
  inline void set_container(const ::std::string& value);
  inline void set_container(const char* value);
  inline void set_container(const char* value, size_t size);
  inline ::std::string* mutable_container();
  inline ::std::string* release_container();
  inline void set_allocated_container(::std::string* container);

  // required double retailPrice = 8;
  inline bool has_retailprice() const;
  inline void clear_retailprice();
  static const int kRetailPriceFieldNumber = 8;
  inline double retailprice() const;
  inline void set_retailprice(double value);

  // required string comment = 9;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 9;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // @@protoc_insertion_point(class_scope:proto.LineItemP.PartP)
 private:
  inline void set_has_partkey();
  inline void clear_has_partkey();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_mfgr();
  inline void clear_has_mfgr();
  inline void set_has_brand();
  inline void clear_has_brand();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_container();
  inline void clear_has_container();
  inline void set_has_retailprice();
  inline void clear_has_retailprice();
  inline void set_has_comment();
  inline void clear_has_comment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* mfgr_;
  ::google::protobuf::int32 partkey_;
  ::google::protobuf::int32 size_;
  ::std::string* brand_;
  ::std::string* type_;
  ::std::string* container_;
  double retailprice_;
  ::std::string* comment_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_LineItemP_2eproto();
  friend void protobuf_AssignDesc_LineItemP_2eproto();
  friend void protobuf_ShutdownFile_LineItemP_2eproto();

  void InitAsDefaultInstance();
  static LineItemP_PartP* default_instance_;
};
// -------------------------------------------------------------------

class LineItemP : public ::google::protobuf::Message {
 public:
  LineItemP();
  virtual ~LineItemP();

  LineItemP(const LineItemP& from);

  inline LineItemP& operator=(const LineItemP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LineItemP& default_instance();

  void Swap(LineItemP* other);

  // implements Message ----------------------------------------------

  LineItemP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LineItemP& from);
  void MergeFrom(const LineItemP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LineItemP_SupplierP SupplierP;
  typedef LineItemP_PartP PartP;

  // accessors -------------------------------------------------------

  // required int32 lineNumber = 1;
  inline bool has_linenumber() const;
  inline void clear_linenumber();
  static const int kLineNumberFieldNumber = 1;
  inline ::google::protobuf::int32 linenumber() const;
  inline void set_linenumber(::google::protobuf::int32 value);

  // required double quantity = 2;
  inline bool has_quantity() const;
  inline void clear_quantity();
  static const int kQuantityFieldNumber = 2;
  inline double quantity() const;
  inline void set_quantity(double value);

  // required double extendedPrice = 3;
  inline bool has_extendedprice() const;
  inline void clear_extendedprice();
  static const int kExtendedPriceFieldNumber = 3;
  inline double extendedprice() const;
  inline void set_extendedprice(double value);

  // required double discount = 4;
  inline bool has_discount() const;
  inline void clear_discount();
  static const int kDiscountFieldNumber = 4;
  inline double discount() const;
  inline void set_discount(double value);

  // required double tax = 5;
  inline bool has_tax() const;
  inline void clear_tax();
  static const int kTaxFieldNumber = 5;
  inline double tax() const;
  inline void set_tax(double value);

  // required string returnFlag = 6;
  inline bool has_returnflag() const;
  inline void clear_returnflag();
  static const int kReturnFlagFieldNumber = 6;
  inline const ::std::string& returnflag() const;
  inline void set_returnflag(const ::std::string& value);
  inline void set_returnflag(const char* value);
  inline void set_returnflag(const char* value, size_t size);
  inline ::std::string* mutable_returnflag();
  inline ::std::string* release_returnflag();
  inline void set_allocated_returnflag(::std::string* returnflag);

  // required string lineStatus = 7;
  inline bool has_linestatus() const;
  inline void clear_linestatus();
  static const int kLineStatusFieldNumber = 7;
  inline const ::std::string& linestatus() const;
  inline void set_linestatus(const ::std::string& value);
  inline void set_linestatus(const char* value);
  inline void set_linestatus(const char* value, size_t size);
  inline ::std::string* mutable_linestatus();
  inline ::std::string* release_linestatus();
  inline void set_allocated_linestatus(::std::string* linestatus);

  // required string shipDate = 8;
  inline bool has_shipdate() const;
  inline void clear_shipdate();
  static const int kShipDateFieldNumber = 8;
  inline const ::std::string& shipdate() const;
  inline void set_shipdate(const ::std::string& value);
  inline void set_shipdate(const char* value);
  inline void set_shipdate(const char* value, size_t size);
  inline ::std::string* mutable_shipdate();
  inline ::std::string* release_shipdate();
  inline void set_allocated_shipdate(::std::string* shipdate);

  // required string commitDate = 9;
  inline bool has_commitdate() const;
  inline void clear_commitdate();
  static const int kCommitDateFieldNumber = 9;
  inline const ::std::string& commitdate() const;
  inline void set_commitdate(const ::std::string& value);
  inline void set_commitdate(const char* value);
  inline void set_commitdate(const char* value, size_t size);
  inline ::std::string* mutable_commitdate();
  inline ::std::string* release_commitdate();
  inline void set_allocated_commitdate(::std::string* commitdate);

  // required string receiptDate = 10;
  inline bool has_receiptdate() const;
  inline void clear_receiptdate();
  static const int kReceiptDateFieldNumber = 10;
  inline const ::std::string& receiptdate() const;
  inline void set_receiptdate(const ::std::string& value);
  inline void set_receiptdate(const char* value);
  inline void set_receiptdate(const char* value, size_t size);
  inline ::std::string* mutable_receiptdate();
  inline ::std::string* release_receiptdate();
  inline void set_allocated_receiptdate(::std::string* receiptdate);

  // required string shipinStruct = 11;
  inline bool has_shipinstruct() const;
  inline void clear_shipinstruct();
  static const int kShipinStructFieldNumber = 11;
  inline const ::std::string& shipinstruct() const;
  inline void set_shipinstruct(const ::std::string& value);
  inline void set_shipinstruct(const char* value);
  inline void set_shipinstruct(const char* value, size_t size);
  inline ::std::string* mutable_shipinstruct();
  inline ::std::string* release_shipinstruct();
  inline void set_allocated_shipinstruct(::std::string* shipinstruct);

  // required string shipMode = 12;
  inline bool has_shipmode() const;
  inline void clear_shipmode();
  static const int kShipModeFieldNumber = 12;
  inline const ::std::string& shipmode() const;
  inline void set_shipmode(const ::std::string& value);
  inline void set_shipmode(const char* value);
  inline void set_shipmode(const char* value, size_t size);
  inline ::std::string* mutable_shipmode();
  inline ::std::string* release_shipmode();
  inline void set_allocated_shipmode(::std::string* shipmode);

  // required string comment = 13;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 13;
  inline const ::std::string& comment() const;
  inline void set_comment(const ::std::string& value);
  inline void set_comment(const char* value);
  inline void set_comment(const char* value, size_t size);
  inline ::std::string* mutable_comment();
  inline ::std::string* release_comment();
  inline void set_allocated_comment(::std::string* comment);

  // required .proto.LineItemP.PartP partP = 14;
  inline bool has_partp() const;
  inline void clear_partp();
  static const int kPartPFieldNumber = 14;
  inline const ::proto::LineItemP_PartP& partp() const;
  inline ::proto::LineItemP_PartP* mutable_partp();
  inline ::proto::LineItemP_PartP* release_partp();
  inline void set_allocated_partp(::proto::LineItemP_PartP* partp);

  // required .proto.LineItemP.SupplierP supplierP = 15;
  inline bool has_supplierp() const;
  inline void clear_supplierp();
  static const int kSupplierPFieldNumber = 15;
  inline const ::proto::LineItemP_SupplierP& supplierp() const;
  inline ::proto::LineItemP_SupplierP* mutable_supplierp();
  inline ::proto::LineItemP_SupplierP* release_supplierp();
  inline void set_allocated_supplierp(::proto::LineItemP_SupplierP* supplierp);

  // required int32 orderKey = 16;
  inline bool has_orderkey() const;
  inline void clear_orderkey();
  static const int kOrderKeyFieldNumber = 16;
  inline ::google::protobuf::int32 orderkey() const;
  inline void set_orderkey(::google::protobuf::int32 value);

  // required string name = 17;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 17;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:proto.LineItemP)
 private:
  inline void set_has_linenumber();
  inline void clear_has_linenumber();
  inline void set_has_quantity();
  inline void clear_has_quantity();
  inline void set_has_extendedprice();
  inline void clear_has_extendedprice();
  inline void set_has_discount();
  inline void clear_has_discount();
  inline void set_has_tax();
  inline void clear_has_tax();
  inline void set_has_returnflag();
  inline void clear_has_returnflag();
  inline void set_has_linestatus();
  inline void clear_has_linestatus();
  inline void set_has_shipdate();
  inline void clear_has_shipdate();
  inline void set_has_commitdate();
  inline void clear_has_commitdate();
  inline void set_has_receiptdate();
  inline void clear_has_receiptdate();
  inline void set_has_shipinstruct();
  inline void clear_has_shipinstruct();
  inline void set_has_shipmode();
  inline void clear_has_shipmode();
  inline void set_has_comment();
  inline void clear_has_comment();
  inline void set_has_partp();
  inline void clear_has_partp();
  inline void set_has_supplierp();
  inline void clear_has_supplierp();
  inline void set_has_orderkey();
  inline void clear_has_orderkey();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double quantity_;
  double extendedprice_;
  double discount_;
  double tax_;
  ::std::string* returnflag_;
  ::std::string* linestatus_;
  ::std::string* shipdate_;
  ::google::protobuf::int32 linenumber_;
  ::google::protobuf::int32 orderkey_;
  ::std::string* commitdate_;
  ::std::string* receiptdate_;
  ::std::string* shipinstruct_;
  ::std::string* shipmode_;
  ::std::string* comment_;
  ::proto::LineItemP_PartP* partp_;
  ::proto::LineItemP_SupplierP* supplierp_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_LineItemP_2eproto();
  friend void protobuf_AssignDesc_LineItemP_2eproto();
  friend void protobuf_ShutdownFile_LineItemP_2eproto();

  void InitAsDefaultInstance();
  static LineItemP* default_instance_;
};
// ===================================================================


// ===================================================================

// LineItemP_SupplierP

// required int32 supplierKey = 1;
inline bool LineItemP_SupplierP::has_supplierkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LineItemP_SupplierP::set_has_supplierkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LineItemP_SupplierP::clear_has_supplierkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LineItemP_SupplierP::clear_supplierkey() {
  supplierkey_ = 0;
  clear_has_supplierkey();
}
inline ::google::protobuf::int32 LineItemP_SupplierP::supplierkey() const {
  return supplierkey_;
}
inline void LineItemP_SupplierP::set_supplierkey(::google::protobuf::int32 value) {
  set_has_supplierkey();
  supplierkey_ = value;
}

// required string name = 2;
inline bool LineItemP_SupplierP::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LineItemP_SupplierP::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LineItemP_SupplierP::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LineItemP_SupplierP::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LineItemP_SupplierP::name() const {
  return *name_;
}
inline void LineItemP_SupplierP::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LineItemP_SupplierP::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LineItemP_SupplierP::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineItemP_SupplierP::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* LineItemP_SupplierP::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineItemP_SupplierP::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string address = 3;
inline bool LineItemP_SupplierP::has_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LineItemP_SupplierP::set_has_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LineItemP_SupplierP::clear_has_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LineItemP_SupplierP::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& LineItemP_SupplierP::address() const {
  return *address_;
}
inline void LineItemP_SupplierP::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void LineItemP_SupplierP::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void LineItemP_SupplierP::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineItemP_SupplierP::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* LineItemP_SupplierP::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineItemP_SupplierP::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 nationKey = 4;
inline bool LineItemP_SupplierP::has_nationkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LineItemP_SupplierP::set_has_nationkey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LineItemP_SupplierP::clear_has_nationkey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LineItemP_SupplierP::clear_nationkey() {
  nationkey_ = 0;
  clear_has_nationkey();
}
inline ::google::protobuf::int32 LineItemP_SupplierP::nationkey() const {
  return nationkey_;
}
inline void LineItemP_SupplierP::set_nationkey(::google::protobuf::int32 value) {
  set_has_nationkey();
  nationkey_ = value;
}

// required string phone = 5;
inline bool LineItemP_SupplierP::has_phone() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LineItemP_SupplierP::set_has_phone() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LineItemP_SupplierP::clear_has_phone() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LineItemP_SupplierP::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& LineItemP_SupplierP::phone() const {
  return *phone_;
}
inline void LineItemP_SupplierP::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void LineItemP_SupplierP::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void LineItemP_SupplierP::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineItemP_SupplierP::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* LineItemP_SupplierP::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineItemP_SupplierP::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double accbal = 6;
inline bool LineItemP_SupplierP::has_accbal() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LineItemP_SupplierP::set_has_accbal() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LineItemP_SupplierP::clear_has_accbal() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LineItemP_SupplierP::clear_accbal() {
  accbal_ = 0;
  clear_has_accbal();
}
inline double LineItemP_SupplierP::accbal() const {
  return accbal_;
}
inline void LineItemP_SupplierP::set_accbal(double value) {
  set_has_accbal();
  accbal_ = value;
}

// required string comment = 7;
inline bool LineItemP_SupplierP::has_comment() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LineItemP_SupplierP::set_has_comment() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LineItemP_SupplierP::clear_has_comment() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LineItemP_SupplierP::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& LineItemP_SupplierP::comment() const {
  return *comment_;
}
inline void LineItemP_SupplierP::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void LineItemP_SupplierP::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void LineItemP_SupplierP::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineItemP_SupplierP::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* LineItemP_SupplierP::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineItemP_SupplierP::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LineItemP_PartP

// required int32 partKey = 1;
inline bool LineItemP_PartP::has_partkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LineItemP_PartP::set_has_partkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LineItemP_PartP::clear_has_partkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LineItemP_PartP::clear_partkey() {
  partkey_ = 0;
  clear_has_partkey();
}
inline ::google::protobuf::int32 LineItemP_PartP::partkey() const {
  return partkey_;
}
inline void LineItemP_PartP::set_partkey(::google::protobuf::int32 value) {
  set_has_partkey();
  partkey_ = value;
}

// required string name = 2;
inline bool LineItemP_PartP::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LineItemP_PartP::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LineItemP_PartP::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LineItemP_PartP::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LineItemP_PartP::name() const {
  return *name_;
}
inline void LineItemP_PartP::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LineItemP_PartP::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LineItemP_PartP::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineItemP_PartP::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* LineItemP_PartP::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineItemP_PartP::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string mfgr = 3;
inline bool LineItemP_PartP::has_mfgr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LineItemP_PartP::set_has_mfgr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LineItemP_PartP::clear_has_mfgr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LineItemP_PartP::clear_mfgr() {
  if (mfgr_ != &::google::protobuf::internal::kEmptyString) {
    mfgr_->clear();
  }
  clear_has_mfgr();
}
inline const ::std::string& LineItemP_PartP::mfgr() const {
  return *mfgr_;
}
inline void LineItemP_PartP::set_mfgr(const ::std::string& value) {
  set_has_mfgr();
  if (mfgr_ == &::google::protobuf::internal::kEmptyString) {
    mfgr_ = new ::std::string;
  }
  mfgr_->assign(value);
}
inline void LineItemP_PartP::set_mfgr(const char* value) {
  set_has_mfgr();
  if (mfgr_ == &::google::protobuf::internal::kEmptyString) {
    mfgr_ = new ::std::string;
  }
  mfgr_->assign(value);
}
inline void LineItemP_PartP::set_mfgr(const char* value, size_t size) {
  set_has_mfgr();
  if (mfgr_ == &::google::protobuf::internal::kEmptyString) {
    mfgr_ = new ::std::string;
  }
  mfgr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineItemP_PartP::mutable_mfgr() {
  set_has_mfgr();
  if (mfgr_ == &::google::protobuf::internal::kEmptyString) {
    mfgr_ = new ::std::string;
  }
  return mfgr_;
}
inline ::std::string* LineItemP_PartP::release_mfgr() {
  clear_has_mfgr();
  if (mfgr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mfgr_;
    mfgr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineItemP_PartP::set_allocated_mfgr(::std::string* mfgr) {
  if (mfgr_ != &::google::protobuf::internal::kEmptyString) {
    delete mfgr_;
  }
  if (mfgr) {
    set_has_mfgr();
    mfgr_ = mfgr;
  } else {
    clear_has_mfgr();
    mfgr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string brand = 4;
inline bool LineItemP_PartP::has_brand() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LineItemP_PartP::set_has_brand() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LineItemP_PartP::clear_has_brand() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LineItemP_PartP::clear_brand() {
  if (brand_ != &::google::protobuf::internal::kEmptyString) {
    brand_->clear();
  }
  clear_has_brand();
}
inline const ::std::string& LineItemP_PartP::brand() const {
  return *brand_;
}
inline void LineItemP_PartP::set_brand(const ::std::string& value) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::kEmptyString) {
    brand_ = new ::std::string;
  }
  brand_->assign(value);
}
inline void LineItemP_PartP::set_brand(const char* value) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::kEmptyString) {
    brand_ = new ::std::string;
  }
  brand_->assign(value);
}
inline void LineItemP_PartP::set_brand(const char* value, size_t size) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::kEmptyString) {
    brand_ = new ::std::string;
  }
  brand_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineItemP_PartP::mutable_brand() {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::kEmptyString) {
    brand_ = new ::std::string;
  }
  return brand_;
}
inline ::std::string* LineItemP_PartP::release_brand() {
  clear_has_brand();
  if (brand_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = brand_;
    brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineItemP_PartP::set_allocated_brand(::std::string* brand) {
  if (brand_ != &::google::protobuf::internal::kEmptyString) {
    delete brand_;
  }
  if (brand) {
    set_has_brand();
    brand_ = brand;
  } else {
    clear_has_brand();
    brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string type = 5;
inline bool LineItemP_PartP::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LineItemP_PartP::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LineItemP_PartP::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LineItemP_PartP::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& LineItemP_PartP::type() const {
  return *type_;
}
inline void LineItemP_PartP::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void LineItemP_PartP::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void LineItemP_PartP::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineItemP_PartP::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* LineItemP_PartP::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineItemP_PartP::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 size = 6;
inline bool LineItemP_PartP::has_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LineItemP_PartP::set_has_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LineItemP_PartP::clear_has_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LineItemP_PartP::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 LineItemP_PartP::size() const {
  return size_;
}
inline void LineItemP_PartP::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// required string container = 7;
inline bool LineItemP_PartP::has_container() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LineItemP_PartP::set_has_container() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LineItemP_PartP::clear_has_container() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LineItemP_PartP::clear_container() {
  if (container_ != &::google::protobuf::internal::kEmptyString) {
    container_->clear();
  }
  clear_has_container();
}
inline const ::std::string& LineItemP_PartP::container() const {
  return *container_;
}
inline void LineItemP_PartP::set_container(const ::std::string& value) {
  set_has_container();
  if (container_ == &::google::protobuf::internal::kEmptyString) {
    container_ = new ::std::string;
  }
  container_->assign(value);
}
inline void LineItemP_PartP::set_container(const char* value) {
  set_has_container();
  if (container_ == &::google::protobuf::internal::kEmptyString) {
    container_ = new ::std::string;
  }
  container_->assign(value);
}
inline void LineItemP_PartP::set_container(const char* value, size_t size) {
  set_has_container();
  if (container_ == &::google::protobuf::internal::kEmptyString) {
    container_ = new ::std::string;
  }
  container_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineItemP_PartP::mutable_container() {
  set_has_container();
  if (container_ == &::google::protobuf::internal::kEmptyString) {
    container_ = new ::std::string;
  }
  return container_;
}
inline ::std::string* LineItemP_PartP::release_container() {
  clear_has_container();
  if (container_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = container_;
    container_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineItemP_PartP::set_allocated_container(::std::string* container) {
  if (container_ != &::google::protobuf::internal::kEmptyString) {
    delete container_;
  }
  if (container) {
    set_has_container();
    container_ = container;
  } else {
    clear_has_container();
    container_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required double retailPrice = 8;
inline bool LineItemP_PartP::has_retailprice() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LineItemP_PartP::set_has_retailprice() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LineItemP_PartP::clear_has_retailprice() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LineItemP_PartP::clear_retailprice() {
  retailprice_ = 0;
  clear_has_retailprice();
}
inline double LineItemP_PartP::retailprice() const {
  return retailprice_;
}
inline void LineItemP_PartP::set_retailprice(double value) {
  set_has_retailprice();
  retailprice_ = value;
}

// required string comment = 9;
inline bool LineItemP_PartP::has_comment() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LineItemP_PartP::set_has_comment() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LineItemP_PartP::clear_has_comment() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LineItemP_PartP::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& LineItemP_PartP::comment() const {
  return *comment_;
}
inline void LineItemP_PartP::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void LineItemP_PartP::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void LineItemP_PartP::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineItemP_PartP::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* LineItemP_PartP::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineItemP_PartP::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// LineItemP

// required int32 lineNumber = 1;
inline bool LineItemP::has_linenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LineItemP::set_has_linenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LineItemP::clear_has_linenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LineItemP::clear_linenumber() {
  linenumber_ = 0;
  clear_has_linenumber();
}
inline ::google::protobuf::int32 LineItemP::linenumber() const {
  return linenumber_;
}
inline void LineItemP::set_linenumber(::google::protobuf::int32 value) {
  set_has_linenumber();
  linenumber_ = value;
}

// required double quantity = 2;
inline bool LineItemP::has_quantity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LineItemP::set_has_quantity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LineItemP::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LineItemP::clear_quantity() {
  quantity_ = 0;
  clear_has_quantity();
}
inline double LineItemP::quantity() const {
  return quantity_;
}
inline void LineItemP::set_quantity(double value) {
  set_has_quantity();
  quantity_ = value;
}

// required double extendedPrice = 3;
inline bool LineItemP::has_extendedprice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LineItemP::set_has_extendedprice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LineItemP::clear_has_extendedprice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LineItemP::clear_extendedprice() {
  extendedprice_ = 0;
  clear_has_extendedprice();
}
inline double LineItemP::extendedprice() const {
  return extendedprice_;
}
inline void LineItemP::set_extendedprice(double value) {
  set_has_extendedprice();
  extendedprice_ = value;
}

// required double discount = 4;
inline bool LineItemP::has_discount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LineItemP::set_has_discount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LineItemP::clear_has_discount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LineItemP::clear_discount() {
  discount_ = 0;
  clear_has_discount();
}
inline double LineItemP::discount() const {
  return discount_;
}
inline void LineItemP::set_discount(double value) {
  set_has_discount();
  discount_ = value;
}

// required double tax = 5;
inline bool LineItemP::has_tax() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LineItemP::set_has_tax() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LineItemP::clear_has_tax() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LineItemP::clear_tax() {
  tax_ = 0;
  clear_has_tax();
}
inline double LineItemP::tax() const {
  return tax_;
}
inline void LineItemP::set_tax(double value) {
  set_has_tax();
  tax_ = value;
}

// required string returnFlag = 6;
inline bool LineItemP::has_returnflag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LineItemP::set_has_returnflag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LineItemP::clear_has_returnflag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LineItemP::clear_returnflag() {
  if (returnflag_ != &::google::protobuf::internal::kEmptyString) {
    returnflag_->clear();
  }
  clear_has_returnflag();
}
inline const ::std::string& LineItemP::returnflag() const {
  return *returnflag_;
}
inline void LineItemP::set_returnflag(const ::std::string& value) {
  set_has_returnflag();
  if (returnflag_ == &::google::protobuf::internal::kEmptyString) {
    returnflag_ = new ::std::string;
  }
  returnflag_->assign(value);
}
inline void LineItemP::set_returnflag(const char* value) {
  set_has_returnflag();
  if (returnflag_ == &::google::protobuf::internal::kEmptyString) {
    returnflag_ = new ::std::string;
  }
  returnflag_->assign(value);
}
inline void LineItemP::set_returnflag(const char* value, size_t size) {
  set_has_returnflag();
  if (returnflag_ == &::google::protobuf::internal::kEmptyString) {
    returnflag_ = new ::std::string;
  }
  returnflag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineItemP::mutable_returnflag() {
  set_has_returnflag();
  if (returnflag_ == &::google::protobuf::internal::kEmptyString) {
    returnflag_ = new ::std::string;
  }
  return returnflag_;
}
inline ::std::string* LineItemP::release_returnflag() {
  clear_has_returnflag();
  if (returnflag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = returnflag_;
    returnflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineItemP::set_allocated_returnflag(::std::string* returnflag) {
  if (returnflag_ != &::google::protobuf::internal::kEmptyString) {
    delete returnflag_;
  }
  if (returnflag) {
    set_has_returnflag();
    returnflag_ = returnflag;
  } else {
    clear_has_returnflag();
    returnflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string lineStatus = 7;
inline bool LineItemP::has_linestatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LineItemP::set_has_linestatus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LineItemP::clear_has_linestatus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LineItemP::clear_linestatus() {
  if (linestatus_ != &::google::protobuf::internal::kEmptyString) {
    linestatus_->clear();
  }
  clear_has_linestatus();
}
inline const ::std::string& LineItemP::linestatus() const {
  return *linestatus_;
}
inline void LineItemP::set_linestatus(const ::std::string& value) {
  set_has_linestatus();
  if (linestatus_ == &::google::protobuf::internal::kEmptyString) {
    linestatus_ = new ::std::string;
  }
  linestatus_->assign(value);
}
inline void LineItemP::set_linestatus(const char* value) {
  set_has_linestatus();
  if (linestatus_ == &::google::protobuf::internal::kEmptyString) {
    linestatus_ = new ::std::string;
  }
  linestatus_->assign(value);
}
inline void LineItemP::set_linestatus(const char* value, size_t size) {
  set_has_linestatus();
  if (linestatus_ == &::google::protobuf::internal::kEmptyString) {
    linestatus_ = new ::std::string;
  }
  linestatus_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineItemP::mutable_linestatus() {
  set_has_linestatus();
  if (linestatus_ == &::google::protobuf::internal::kEmptyString) {
    linestatus_ = new ::std::string;
  }
  return linestatus_;
}
inline ::std::string* LineItemP::release_linestatus() {
  clear_has_linestatus();
  if (linestatus_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = linestatus_;
    linestatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineItemP::set_allocated_linestatus(::std::string* linestatus) {
  if (linestatus_ != &::google::protobuf::internal::kEmptyString) {
    delete linestatus_;
  }
  if (linestatus) {
    set_has_linestatus();
    linestatus_ = linestatus;
  } else {
    clear_has_linestatus();
    linestatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string shipDate = 8;
inline bool LineItemP::has_shipdate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LineItemP::set_has_shipdate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LineItemP::clear_has_shipdate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LineItemP::clear_shipdate() {
  if (shipdate_ != &::google::protobuf::internal::kEmptyString) {
    shipdate_->clear();
  }
  clear_has_shipdate();
}
inline const ::std::string& LineItemP::shipdate() const {
  return *shipdate_;
}
inline void LineItemP::set_shipdate(const ::std::string& value) {
  set_has_shipdate();
  if (shipdate_ == &::google::protobuf::internal::kEmptyString) {
    shipdate_ = new ::std::string;
  }
  shipdate_->assign(value);
}
inline void LineItemP::set_shipdate(const char* value) {
  set_has_shipdate();
  if (shipdate_ == &::google::protobuf::internal::kEmptyString) {
    shipdate_ = new ::std::string;
  }
  shipdate_->assign(value);
}
inline void LineItemP::set_shipdate(const char* value, size_t size) {
  set_has_shipdate();
  if (shipdate_ == &::google::protobuf::internal::kEmptyString) {
    shipdate_ = new ::std::string;
  }
  shipdate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineItemP::mutable_shipdate() {
  set_has_shipdate();
  if (shipdate_ == &::google::protobuf::internal::kEmptyString) {
    shipdate_ = new ::std::string;
  }
  return shipdate_;
}
inline ::std::string* LineItemP::release_shipdate() {
  clear_has_shipdate();
  if (shipdate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shipdate_;
    shipdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineItemP::set_allocated_shipdate(::std::string* shipdate) {
  if (shipdate_ != &::google::protobuf::internal::kEmptyString) {
    delete shipdate_;
  }
  if (shipdate) {
    set_has_shipdate();
    shipdate_ = shipdate;
  } else {
    clear_has_shipdate();
    shipdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string commitDate = 9;
inline bool LineItemP::has_commitdate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LineItemP::set_has_commitdate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LineItemP::clear_has_commitdate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LineItemP::clear_commitdate() {
  if (commitdate_ != &::google::protobuf::internal::kEmptyString) {
    commitdate_->clear();
  }
  clear_has_commitdate();
}
inline const ::std::string& LineItemP::commitdate() const {
  return *commitdate_;
}
inline void LineItemP::set_commitdate(const ::std::string& value) {
  set_has_commitdate();
  if (commitdate_ == &::google::protobuf::internal::kEmptyString) {
    commitdate_ = new ::std::string;
  }
  commitdate_->assign(value);
}
inline void LineItemP::set_commitdate(const char* value) {
  set_has_commitdate();
  if (commitdate_ == &::google::protobuf::internal::kEmptyString) {
    commitdate_ = new ::std::string;
  }
  commitdate_->assign(value);
}
inline void LineItemP::set_commitdate(const char* value, size_t size) {
  set_has_commitdate();
  if (commitdate_ == &::google::protobuf::internal::kEmptyString) {
    commitdate_ = new ::std::string;
  }
  commitdate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineItemP::mutable_commitdate() {
  set_has_commitdate();
  if (commitdate_ == &::google::protobuf::internal::kEmptyString) {
    commitdate_ = new ::std::string;
  }
  return commitdate_;
}
inline ::std::string* LineItemP::release_commitdate() {
  clear_has_commitdate();
  if (commitdate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = commitdate_;
    commitdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineItemP::set_allocated_commitdate(::std::string* commitdate) {
  if (commitdate_ != &::google::protobuf::internal::kEmptyString) {
    delete commitdate_;
  }
  if (commitdate) {
    set_has_commitdate();
    commitdate_ = commitdate;
  } else {
    clear_has_commitdate();
    commitdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string receiptDate = 10;
inline bool LineItemP::has_receiptdate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LineItemP::set_has_receiptdate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LineItemP::clear_has_receiptdate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LineItemP::clear_receiptdate() {
  if (receiptdate_ != &::google::protobuf::internal::kEmptyString) {
    receiptdate_->clear();
  }
  clear_has_receiptdate();
}
inline const ::std::string& LineItemP::receiptdate() const {
  return *receiptdate_;
}
inline void LineItemP::set_receiptdate(const ::std::string& value) {
  set_has_receiptdate();
  if (receiptdate_ == &::google::protobuf::internal::kEmptyString) {
    receiptdate_ = new ::std::string;
  }
  receiptdate_->assign(value);
}
inline void LineItemP::set_receiptdate(const char* value) {
  set_has_receiptdate();
  if (receiptdate_ == &::google::protobuf::internal::kEmptyString) {
    receiptdate_ = new ::std::string;
  }
  receiptdate_->assign(value);
}
inline void LineItemP::set_receiptdate(const char* value, size_t size) {
  set_has_receiptdate();
  if (receiptdate_ == &::google::protobuf::internal::kEmptyString) {
    receiptdate_ = new ::std::string;
  }
  receiptdate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineItemP::mutable_receiptdate() {
  set_has_receiptdate();
  if (receiptdate_ == &::google::protobuf::internal::kEmptyString) {
    receiptdate_ = new ::std::string;
  }
  return receiptdate_;
}
inline ::std::string* LineItemP::release_receiptdate() {
  clear_has_receiptdate();
  if (receiptdate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = receiptdate_;
    receiptdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineItemP::set_allocated_receiptdate(::std::string* receiptdate) {
  if (receiptdate_ != &::google::protobuf::internal::kEmptyString) {
    delete receiptdate_;
  }
  if (receiptdate) {
    set_has_receiptdate();
    receiptdate_ = receiptdate;
  } else {
    clear_has_receiptdate();
    receiptdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string shipinStruct = 11;
inline bool LineItemP::has_shipinstruct() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LineItemP::set_has_shipinstruct() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LineItemP::clear_has_shipinstruct() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LineItemP::clear_shipinstruct() {
  if (shipinstruct_ != &::google::protobuf::internal::kEmptyString) {
    shipinstruct_->clear();
  }
  clear_has_shipinstruct();
}
inline const ::std::string& LineItemP::shipinstruct() const {
  return *shipinstruct_;
}
inline void LineItemP::set_shipinstruct(const ::std::string& value) {
  set_has_shipinstruct();
  if (shipinstruct_ == &::google::protobuf::internal::kEmptyString) {
    shipinstruct_ = new ::std::string;
  }
  shipinstruct_->assign(value);
}
inline void LineItemP::set_shipinstruct(const char* value) {
  set_has_shipinstruct();
  if (shipinstruct_ == &::google::protobuf::internal::kEmptyString) {
    shipinstruct_ = new ::std::string;
  }
  shipinstruct_->assign(value);
}
inline void LineItemP::set_shipinstruct(const char* value, size_t size) {
  set_has_shipinstruct();
  if (shipinstruct_ == &::google::protobuf::internal::kEmptyString) {
    shipinstruct_ = new ::std::string;
  }
  shipinstruct_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineItemP::mutable_shipinstruct() {
  set_has_shipinstruct();
  if (shipinstruct_ == &::google::protobuf::internal::kEmptyString) {
    shipinstruct_ = new ::std::string;
  }
  return shipinstruct_;
}
inline ::std::string* LineItemP::release_shipinstruct() {
  clear_has_shipinstruct();
  if (shipinstruct_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shipinstruct_;
    shipinstruct_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineItemP::set_allocated_shipinstruct(::std::string* shipinstruct) {
  if (shipinstruct_ != &::google::protobuf::internal::kEmptyString) {
    delete shipinstruct_;
  }
  if (shipinstruct) {
    set_has_shipinstruct();
    shipinstruct_ = shipinstruct;
  } else {
    clear_has_shipinstruct();
    shipinstruct_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string shipMode = 12;
inline bool LineItemP::has_shipmode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LineItemP::set_has_shipmode() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LineItemP::clear_has_shipmode() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LineItemP::clear_shipmode() {
  if (shipmode_ != &::google::protobuf::internal::kEmptyString) {
    shipmode_->clear();
  }
  clear_has_shipmode();
}
inline const ::std::string& LineItemP::shipmode() const {
  return *shipmode_;
}
inline void LineItemP::set_shipmode(const ::std::string& value) {
  set_has_shipmode();
  if (shipmode_ == &::google::protobuf::internal::kEmptyString) {
    shipmode_ = new ::std::string;
  }
  shipmode_->assign(value);
}
inline void LineItemP::set_shipmode(const char* value) {
  set_has_shipmode();
  if (shipmode_ == &::google::protobuf::internal::kEmptyString) {
    shipmode_ = new ::std::string;
  }
  shipmode_->assign(value);
}
inline void LineItemP::set_shipmode(const char* value, size_t size) {
  set_has_shipmode();
  if (shipmode_ == &::google::protobuf::internal::kEmptyString) {
    shipmode_ = new ::std::string;
  }
  shipmode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineItemP::mutable_shipmode() {
  set_has_shipmode();
  if (shipmode_ == &::google::protobuf::internal::kEmptyString) {
    shipmode_ = new ::std::string;
  }
  return shipmode_;
}
inline ::std::string* LineItemP::release_shipmode() {
  clear_has_shipmode();
  if (shipmode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shipmode_;
    shipmode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineItemP::set_allocated_shipmode(::std::string* shipmode) {
  if (shipmode_ != &::google::protobuf::internal::kEmptyString) {
    delete shipmode_;
  }
  if (shipmode) {
    set_has_shipmode();
    shipmode_ = shipmode;
  } else {
    clear_has_shipmode();
    shipmode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string comment = 13;
inline bool LineItemP::has_comment() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LineItemP::set_has_comment() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LineItemP::clear_has_comment() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LineItemP::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& LineItemP::comment() const {
  return *comment_;
}
inline void LineItemP::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void LineItemP::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void LineItemP::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineItemP::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* LineItemP::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineItemP::set_allocated_comment(::std::string* comment) {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (comment) {
    set_has_comment();
    comment_ = comment;
  } else {
    clear_has_comment();
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .proto.LineItemP.PartP partP = 14;
inline bool LineItemP::has_partp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LineItemP::set_has_partp() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LineItemP::clear_has_partp() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LineItemP::clear_partp() {
  if (partp_ != NULL) partp_->::proto::LineItemP_PartP::Clear();
  clear_has_partp();
}
inline const ::proto::LineItemP_PartP& LineItemP::partp() const {
  return partp_ != NULL ? *partp_ : *default_instance_->partp_;
}
inline ::proto::LineItemP_PartP* LineItemP::mutable_partp() {
  set_has_partp();
  if (partp_ == NULL) partp_ = new ::proto::LineItemP_PartP;
  return partp_;
}
inline ::proto::LineItemP_PartP* LineItemP::release_partp() {
  clear_has_partp();
  ::proto::LineItemP_PartP* temp = partp_;
  partp_ = NULL;
  return temp;
}
inline void LineItemP::set_allocated_partp(::proto::LineItemP_PartP* partp) {
  delete partp_;
  partp_ = partp;
  if (partp) {
    set_has_partp();
  } else {
    clear_has_partp();
  }
}

// required .proto.LineItemP.SupplierP supplierP = 15;
inline bool LineItemP::has_supplierp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LineItemP::set_has_supplierp() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LineItemP::clear_has_supplierp() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LineItemP::clear_supplierp() {
  if (supplierp_ != NULL) supplierp_->::proto::LineItemP_SupplierP::Clear();
  clear_has_supplierp();
}
inline const ::proto::LineItemP_SupplierP& LineItemP::supplierp() const {
  return supplierp_ != NULL ? *supplierp_ : *default_instance_->supplierp_;
}
inline ::proto::LineItemP_SupplierP* LineItemP::mutable_supplierp() {
  set_has_supplierp();
  if (supplierp_ == NULL) supplierp_ = new ::proto::LineItemP_SupplierP;
  return supplierp_;
}
inline ::proto::LineItemP_SupplierP* LineItemP::release_supplierp() {
  clear_has_supplierp();
  ::proto::LineItemP_SupplierP* temp = supplierp_;
  supplierp_ = NULL;
  return temp;
}
inline void LineItemP::set_allocated_supplierp(::proto::LineItemP_SupplierP* supplierp) {
  delete supplierp_;
  supplierp_ = supplierp;
  if (supplierp) {
    set_has_supplierp();
  } else {
    clear_has_supplierp();
  }
}

// required int32 orderKey = 16;
inline bool LineItemP::has_orderkey() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LineItemP::set_has_orderkey() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LineItemP::clear_has_orderkey() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LineItemP::clear_orderkey() {
  orderkey_ = 0;
  clear_has_orderkey();
}
inline ::google::protobuf::int32 LineItemP::orderkey() const {
  return orderkey_;
}
inline void LineItemP::set_orderkey(::google::protobuf::int32 value) {
  set_has_orderkey();
  orderkey_ = value;
}

// required string name = 17;
inline bool LineItemP::has_name() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LineItemP::set_has_name() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LineItemP::clear_has_name() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LineItemP::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LineItemP::name() const {
  return *name_;
}
inline void LineItemP::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LineItemP::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LineItemP::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LineItemP::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* LineItemP::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LineItemP::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LineItemP_2eproto__INCLUDED
