// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OrderP.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OrderP.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* OrderP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderP_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderP_LineItemP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderP_LineItemP_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderP_LineItemP_SupplierP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderP_LineItemP_SupplierP_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderP_LineItemP_PartP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderP_LineItemP_PartP_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_OrderP_2eproto() {
  protobuf_AddDesc_OrderP_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "OrderP.proto");
  GOOGLE_CHECK(file != NULL);
  OrderP_descriptor_ = file->message_type(0);
  static const int OrderP_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP, orderkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP, custkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP, orderstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP, totalprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP, orderdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP, orderpriority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP, clerk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP, shippriority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP, lineitem_),
  };
  OrderP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderP_descriptor_,
      OrderP::default_instance_,
      OrderP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderP));
  OrderP_LineItemP_descriptor_ = OrderP_descriptor_->nested_type(0);
  static const int OrderP_LineItemP_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP, linenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP, extendedprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP, discount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP, tax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP, returnflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP, linestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP, shipdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP, commitdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP, receiptdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP, shipinstruct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP, shipmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP, partp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP, supplierp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP, orderkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP, name_),
  };
  OrderP_LineItemP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderP_LineItemP_descriptor_,
      OrderP_LineItemP::default_instance_,
      OrderP_LineItemP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderP_LineItemP));
  OrderP_LineItemP_SupplierP_descriptor_ = OrderP_LineItemP_descriptor_->nested_type(0);
  static const int OrderP_LineItemP_SupplierP_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP_SupplierP, supplierkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP_SupplierP, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP_SupplierP, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP_SupplierP, nationkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP_SupplierP, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP_SupplierP, accbal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP_SupplierP, comment_),
  };
  OrderP_LineItemP_SupplierP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderP_LineItemP_SupplierP_descriptor_,
      OrderP_LineItemP_SupplierP::default_instance_,
      OrderP_LineItemP_SupplierP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP_SupplierP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP_SupplierP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderP_LineItemP_SupplierP));
  OrderP_LineItemP_PartP_descriptor_ = OrderP_LineItemP_descriptor_->nested_type(1);
  static const int OrderP_LineItemP_PartP_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP_PartP, partkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP_PartP, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP_PartP, mfgr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP_PartP, brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP_PartP, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP_PartP, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP_PartP, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP_PartP, retailprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP_PartP, comment_),
  };
  OrderP_LineItemP_PartP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderP_LineItemP_PartP_descriptor_,
      OrderP_LineItemP_PartP::default_instance_,
      OrderP_LineItemP_PartP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP_PartP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderP_LineItemP_PartP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderP_LineItemP_PartP));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_OrderP_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderP_descriptor_, &OrderP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderP_LineItemP_descriptor_, &OrderP_LineItemP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderP_LineItemP_SupplierP_descriptor_, &OrderP_LineItemP_SupplierP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderP_LineItemP_PartP_descriptor_, &OrderP_LineItemP_PartP::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_OrderP_2eproto() {
  delete OrderP::default_instance_;
  delete OrderP_reflection_;
  delete OrderP_LineItemP::default_instance_;
  delete OrderP_LineItemP_reflection_;
  delete OrderP_LineItemP_SupplierP::default_instance_;
  delete OrderP_LineItemP_SupplierP_reflection_;
  delete OrderP_LineItemP_PartP::default_instance_;
  delete OrderP_LineItemP_PartP_reflection_;
}

void protobuf_AddDesc_OrderP_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014OrderP.proto\022\005proto\"\211\007\n\006OrderP\022\020\n\010orde"
    "rKey\030\001 \002(\005\022\017\n\007custKey\030\002 \002(\005\022\023\n\013orderStat"
    "us\030\003 \002(\t\022\022\n\ntotalPrice\030\004 \002(\001\022\021\n\torderDat"
    "e\030\005 \002(\t\022\025\n\rorderPriority\030\006 \002(\t\022\r\n\005clerk\030"
    "\007 \002(\t\022\024\n\014shipPriority\030\010 \002(\005\022\017\n\007comment\030\t"
    " \002(\t\022)\n\010lineItem\030\n \003(\0132\027.proto.OrderP.Li"
    "neItemP\032\247\005\n\tLineItemP\022\022\n\nlineNumber\030\001 \002("
    "\005\022\020\n\010quantity\030\002 \002(\001\022\025\n\rextendedPrice\030\003 \002"
    "(\001\022\020\n\010discount\030\004 \002(\001\022\013\n\003tax\030\005 \002(\001\022\022\n\nret"
    "urnFlag\030\006 \002(\t\022\022\n\nlineStatus\030\007 \002(\t\022\020\n\010shi"
    "pDate\030\010 \002(\t\022\022\n\ncommitDate\030\t \002(\t\022\023\n\013recei"
    "ptDate\030\n \002(\t\022\024\n\014shipinStruct\030\013 \002(\t\022\020\n\010sh"
    "ipMode\030\014 \002(\t\022\017\n\007comment\030\r \002(\t\022,\n\005partP\030\016"
    " \002(\0132\035.proto.OrderP.LineItemP.PartP\0224\n\ts"
    "upplierP\030\017 \002(\0132!.proto.OrderP.LineItemP."
    "SupplierP\022\020\n\010orderKey\030\020 \002(\005\022\014\n\004name\030\021 \002("
    "\t\032\202\001\n\tSupplierP\022\023\n\013supplierKey\030\001 \002(\005\022\014\n\004"
    "name\030\002 \002(\t\022\017\n\007address\030\003 \002(\t\022\021\n\tnationKey"
    "\030\004 \002(\005\022\r\n\005phone\030\005 \002(\t\022\016\n\006accbal\030\006 \002(\001\022\017\n"
    "\007comment\030\007 \002(\t\032\230\001\n\005PartP\022\017\n\007partKey\030\001 \002("
    "\005\022\014\n\004name\030\002 \002(\t\022\014\n\004mfgr\030\003 \002(\t\022\r\n\005brand\030\004"
    " \002(\t\022\014\n\004type\030\005 \002(\t\022\014\n\004size\030\006 \002(\005\022\021\n\tcont"
    "ainer\030\007 \002(\t\022\023\n\013retailPrice\030\010 \002(\001\022\017\n\007comm"
    "ent\030\t \002(\t", 929);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OrderP.proto", &protobuf_RegisterTypes);
  OrderP::default_instance_ = new OrderP();
  OrderP_LineItemP::default_instance_ = new OrderP_LineItemP();
  OrderP_LineItemP_SupplierP::default_instance_ = new OrderP_LineItemP_SupplierP();
  OrderP_LineItemP_PartP::default_instance_ = new OrderP_LineItemP_PartP();
  OrderP::default_instance_->InitAsDefaultInstance();
  OrderP_LineItemP::default_instance_->InitAsDefaultInstance();
  OrderP_LineItemP_SupplierP::default_instance_->InitAsDefaultInstance();
  OrderP_LineItemP_PartP::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OrderP_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OrderP_2eproto {
  StaticDescriptorInitializer_OrderP_2eproto() {
    protobuf_AddDesc_OrderP_2eproto();
  }
} static_descriptor_initializer_OrderP_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int OrderP_LineItemP_SupplierP::kSupplierKeyFieldNumber;
const int OrderP_LineItemP_SupplierP::kNameFieldNumber;
const int OrderP_LineItemP_SupplierP::kAddressFieldNumber;
const int OrderP_LineItemP_SupplierP::kNationKeyFieldNumber;
const int OrderP_LineItemP_SupplierP::kPhoneFieldNumber;
const int OrderP_LineItemP_SupplierP::kAccbalFieldNumber;
const int OrderP_LineItemP_SupplierP::kCommentFieldNumber;
#endif  // !_MSC_VER

OrderP_LineItemP_SupplierP::OrderP_LineItemP_SupplierP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderP_LineItemP_SupplierP::InitAsDefaultInstance() {
}

OrderP_LineItemP_SupplierP::OrderP_LineItemP_SupplierP(const OrderP_LineItemP_SupplierP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderP_LineItemP_SupplierP::SharedCtor() {
  _cached_size_ = 0;
  supplierkey_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nationkey_ = 0;
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accbal_ = 0;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderP_LineItemP_SupplierP::~OrderP_LineItemP_SupplierP() {
  SharedDtor();
}

void OrderP_LineItemP_SupplierP::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void OrderP_LineItemP_SupplierP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderP_LineItemP_SupplierP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderP_LineItemP_SupplierP_descriptor_;
}

const OrderP_LineItemP_SupplierP& OrderP_LineItemP_SupplierP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OrderP_2eproto();
  return *default_instance_;
}

OrderP_LineItemP_SupplierP* OrderP_LineItemP_SupplierP::default_instance_ = NULL;

OrderP_LineItemP_SupplierP* OrderP_LineItemP_SupplierP::New() const {
  return new OrderP_LineItemP_SupplierP;
}

void OrderP_LineItemP_SupplierP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    supplierkey_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    nationkey_ = 0;
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::kEmptyString) {
        phone_->clear();
      }
    }
    accbal_ = 0;
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderP_LineItemP_SupplierP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 supplierKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &supplierkey_)));
          set_has_supplierkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_address;
        break;
      }

      // required string address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nationKey;
        break;
      }

      // required int32 nationKey = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nationKey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nationkey_)));
          set_has_nationkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_phone;
        break;
      }

      // required string phone = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_accbal;
        break;
      }

      // required double accbal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_accbal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accbal_)));
          set_has_accbal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_comment;
        break;
      }

      // required string comment = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderP_LineItemP_SupplierP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 supplierKey = 1;
  if (has_supplierkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->supplierkey(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string address = 3;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->address(), output);
  }

  // required int32 nationKey = 4;
  if (has_nationkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nationkey(), output);
  }

  // required string phone = 5;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->phone(), output);
  }

  // required double accbal = 6;
  if (has_accbal()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->accbal(), output);
  }

  // required string comment = 7;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->comment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderP_LineItemP_SupplierP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 supplierKey = 1;
  if (has_supplierkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->supplierkey(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string address = 3;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->address(), target);
  }

  // required int32 nationKey = 4;
  if (has_nationkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nationkey(), target);
  }

  // required string phone = 5;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->phone(), target);
  }

  // required double accbal = 6;
  if (has_accbal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->accbal(), target);
  }

  // required string comment = 7;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->comment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderP_LineItemP_SupplierP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 supplierKey = 1;
    if (has_supplierkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->supplierkey());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string address = 3;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // required int32 nationKey = 4;
    if (has_nationkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nationkey());
    }

    // required string phone = 5;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // required double accbal = 6;
    if (has_accbal()) {
      total_size += 1 + 8;
    }

    // required string comment = 7;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderP_LineItemP_SupplierP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderP_LineItemP_SupplierP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderP_LineItemP_SupplierP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderP_LineItemP_SupplierP::MergeFrom(const OrderP_LineItemP_SupplierP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_supplierkey()) {
      set_supplierkey(from.supplierkey());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_nationkey()) {
      set_nationkey(from.nationkey());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_accbal()) {
      set_accbal(from.accbal());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderP_LineItemP_SupplierP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderP_LineItemP_SupplierP::CopyFrom(const OrderP_LineItemP_SupplierP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderP_LineItemP_SupplierP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void OrderP_LineItemP_SupplierP::Swap(OrderP_LineItemP_SupplierP* other) {
  if (other != this) {
    std::swap(supplierkey_, other->supplierkey_);
    std::swap(name_, other->name_);
    std::swap(address_, other->address_);
    std::swap(nationkey_, other->nationkey_);
    std::swap(phone_, other->phone_);
    std::swap(accbal_, other->accbal_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderP_LineItemP_SupplierP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderP_LineItemP_SupplierP_descriptor_;
  metadata.reflection = OrderP_LineItemP_SupplierP_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OrderP_LineItemP_PartP::kPartKeyFieldNumber;
const int OrderP_LineItemP_PartP::kNameFieldNumber;
const int OrderP_LineItemP_PartP::kMfgrFieldNumber;
const int OrderP_LineItemP_PartP::kBrandFieldNumber;
const int OrderP_LineItemP_PartP::kTypeFieldNumber;
const int OrderP_LineItemP_PartP::kSizeFieldNumber;
const int OrderP_LineItemP_PartP::kContainerFieldNumber;
const int OrderP_LineItemP_PartP::kRetailPriceFieldNumber;
const int OrderP_LineItemP_PartP::kCommentFieldNumber;
#endif  // !_MSC_VER

OrderP_LineItemP_PartP::OrderP_LineItemP_PartP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderP_LineItemP_PartP::InitAsDefaultInstance() {
}

OrderP_LineItemP_PartP::OrderP_LineItemP_PartP(const OrderP_LineItemP_PartP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderP_LineItemP_PartP::SharedCtor() {
  _cached_size_ = 0;
  partkey_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mfgr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = 0;
  container_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  retailprice_ = 0;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderP_LineItemP_PartP::~OrderP_LineItemP_PartP() {
  SharedDtor();
}

void OrderP_LineItemP_PartP::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (mfgr_ != &::google::protobuf::internal::kEmptyString) {
    delete mfgr_;
  }
  if (brand_ != &::google::protobuf::internal::kEmptyString) {
    delete brand_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (container_ != &::google::protobuf::internal::kEmptyString) {
    delete container_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void OrderP_LineItemP_PartP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderP_LineItemP_PartP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderP_LineItemP_PartP_descriptor_;
}

const OrderP_LineItemP_PartP& OrderP_LineItemP_PartP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OrderP_2eproto();
  return *default_instance_;
}

OrderP_LineItemP_PartP* OrderP_LineItemP_PartP::default_instance_ = NULL;

OrderP_LineItemP_PartP* OrderP_LineItemP_PartP::New() const {
  return new OrderP_LineItemP_PartP;
}

void OrderP_LineItemP_PartP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    partkey_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_mfgr()) {
      if (mfgr_ != &::google::protobuf::internal::kEmptyString) {
        mfgr_->clear();
      }
    }
    if (has_brand()) {
      if (brand_ != &::google::protobuf::internal::kEmptyString) {
        brand_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    size_ = 0;
    if (has_container()) {
      if (container_ != &::google::protobuf::internal::kEmptyString) {
        container_->clear();
      }
    }
    retailprice_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderP_LineItemP_PartP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 partKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partkey_)));
          set_has_partkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mfgr;
        break;
      }

      // required string mfgr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mfgr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mfgr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mfgr().data(), this->mfgr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_brand;
        break;
      }

      // required string brand = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brand().data(), this->brand().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_type;
        break;
      }

      // required string type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_size;
        break;
      }

      // required int32 size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_container;
        break;
      }

      // required string container = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_container()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->container().data(), this->container().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_retailPrice;
        break;
      }

      // required double retailPrice = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_retailPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &retailprice_)));
          set_has_retailprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_comment;
        break;
      }

      // required string comment = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderP_LineItemP_PartP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 partKey = 1;
  if (has_partkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->partkey(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string mfgr = 3;
  if (has_mfgr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mfgr().data(), this->mfgr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mfgr(), output);
  }

  // required string brand = 4;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->brand(), output);
  }

  // required string type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->type(), output);
  }

  // required int32 size = 6;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->size(), output);
  }

  // required string container = 7;
  if (has_container()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->container().data(), this->container().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->container(), output);
  }

  // required double retailPrice = 8;
  if (has_retailprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->retailprice(), output);
  }

  // required string comment = 9;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->comment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderP_LineItemP_PartP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 partKey = 1;
  if (has_partkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->partkey(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string mfgr = 3;
  if (has_mfgr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mfgr().data(), this->mfgr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mfgr(), target);
  }

  // required string brand = 4;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->brand(), target);
  }

  // required string type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->type(), target);
  }

  // required int32 size = 6;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->size(), target);
  }

  // required string container = 7;
  if (has_container()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->container().data(), this->container().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->container(), target);
  }

  // required double retailPrice = 8;
  if (has_retailprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->retailprice(), target);
  }

  // required string comment = 9;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->comment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderP_LineItemP_PartP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 partKey = 1;
    if (has_partkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partkey());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string mfgr = 3;
    if (has_mfgr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mfgr());
    }

    // required string brand = 4;
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brand());
    }

    // required string type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required int32 size = 6;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // required string container = 7;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->container());
    }

    // required double retailPrice = 8;
    if (has_retailprice()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string comment = 9;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderP_LineItemP_PartP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderP_LineItemP_PartP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderP_LineItemP_PartP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderP_LineItemP_PartP::MergeFrom(const OrderP_LineItemP_PartP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partkey()) {
      set_partkey(from.partkey());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mfgr()) {
      set_mfgr(from.mfgr());
    }
    if (from.has_brand()) {
      set_brand(from.brand());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_container()) {
      set_container(from.container());
    }
    if (from.has_retailprice()) {
      set_retailprice(from.retailprice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderP_LineItemP_PartP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderP_LineItemP_PartP::CopyFrom(const OrderP_LineItemP_PartP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderP_LineItemP_PartP::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void OrderP_LineItemP_PartP::Swap(OrderP_LineItemP_PartP* other) {
  if (other != this) {
    std::swap(partkey_, other->partkey_);
    std::swap(name_, other->name_);
    std::swap(mfgr_, other->mfgr_);
    std::swap(brand_, other->brand_);
    std::swap(type_, other->type_);
    std::swap(size_, other->size_);
    std::swap(container_, other->container_);
    std::swap(retailprice_, other->retailprice_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderP_LineItemP_PartP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderP_LineItemP_PartP_descriptor_;
  metadata.reflection = OrderP_LineItemP_PartP_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OrderP_LineItemP::kLineNumberFieldNumber;
const int OrderP_LineItemP::kQuantityFieldNumber;
const int OrderP_LineItemP::kExtendedPriceFieldNumber;
const int OrderP_LineItemP::kDiscountFieldNumber;
const int OrderP_LineItemP::kTaxFieldNumber;
const int OrderP_LineItemP::kReturnFlagFieldNumber;
const int OrderP_LineItemP::kLineStatusFieldNumber;
const int OrderP_LineItemP::kShipDateFieldNumber;
const int OrderP_LineItemP::kCommitDateFieldNumber;
const int OrderP_LineItemP::kReceiptDateFieldNumber;
const int OrderP_LineItemP::kShipinStructFieldNumber;
const int OrderP_LineItemP::kShipModeFieldNumber;
const int OrderP_LineItemP::kCommentFieldNumber;
const int OrderP_LineItemP::kPartPFieldNumber;
const int OrderP_LineItemP::kSupplierPFieldNumber;
const int OrderP_LineItemP::kOrderKeyFieldNumber;
const int OrderP_LineItemP::kNameFieldNumber;
#endif  // !_MSC_VER

OrderP_LineItemP::OrderP_LineItemP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderP_LineItemP::InitAsDefaultInstance() {
  partp_ = const_cast< ::proto::OrderP_LineItemP_PartP*>(&::proto::OrderP_LineItemP_PartP::default_instance());
  supplierp_ = const_cast< ::proto::OrderP_LineItemP_SupplierP*>(&::proto::OrderP_LineItemP_SupplierP::default_instance());
}

OrderP_LineItemP::OrderP_LineItemP(const OrderP_LineItemP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderP_LineItemP::SharedCtor() {
  _cached_size_ = 0;
  linenumber_ = 0;
  quantity_ = 0;
  extendedprice_ = 0;
  discount_ = 0;
  tax_ = 0;
  returnflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  linestatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shipdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  commitdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiptdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shipinstruct_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shipmode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  partp_ = NULL;
  supplierp_ = NULL;
  orderkey_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderP_LineItemP::~OrderP_LineItemP() {
  SharedDtor();
}

void OrderP_LineItemP::SharedDtor() {
  if (returnflag_ != &::google::protobuf::internal::kEmptyString) {
    delete returnflag_;
  }
  if (linestatus_ != &::google::protobuf::internal::kEmptyString) {
    delete linestatus_;
  }
  if (shipdate_ != &::google::protobuf::internal::kEmptyString) {
    delete shipdate_;
  }
  if (commitdate_ != &::google::protobuf::internal::kEmptyString) {
    delete commitdate_;
  }
  if (receiptdate_ != &::google::protobuf::internal::kEmptyString) {
    delete receiptdate_;
  }
  if (shipinstruct_ != &::google::protobuf::internal::kEmptyString) {
    delete shipinstruct_;
  }
  if (shipmode_ != &::google::protobuf::internal::kEmptyString) {
    delete shipmode_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete partp_;
    delete supplierp_;
  }
}

void OrderP_LineItemP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderP_LineItemP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderP_LineItemP_descriptor_;
}

const OrderP_LineItemP& OrderP_LineItemP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OrderP_2eproto();
  return *default_instance_;
}

OrderP_LineItemP* OrderP_LineItemP::default_instance_ = NULL;

OrderP_LineItemP* OrderP_LineItemP::New() const {
  return new OrderP_LineItemP;
}

void OrderP_LineItemP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    linenumber_ = 0;
    quantity_ = 0;
    extendedprice_ = 0;
    discount_ = 0;
    tax_ = 0;
    if (has_returnflag()) {
      if (returnflag_ != &::google::protobuf::internal::kEmptyString) {
        returnflag_->clear();
      }
    }
    if (has_linestatus()) {
      if (linestatus_ != &::google::protobuf::internal::kEmptyString) {
        linestatus_->clear();
      }
    }
    if (has_shipdate()) {
      if (shipdate_ != &::google::protobuf::internal::kEmptyString) {
        shipdate_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_commitdate()) {
      if (commitdate_ != &::google::protobuf::internal::kEmptyString) {
        commitdate_->clear();
      }
    }
    if (has_receiptdate()) {
      if (receiptdate_ != &::google::protobuf::internal::kEmptyString) {
        receiptdate_->clear();
      }
    }
    if (has_shipinstruct()) {
      if (shipinstruct_ != &::google::protobuf::internal::kEmptyString) {
        shipinstruct_->clear();
      }
    }
    if (has_shipmode()) {
      if (shipmode_ != &::google::protobuf::internal::kEmptyString) {
        shipmode_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    if (has_partp()) {
      if (partp_ != NULL) partp_->::proto::OrderP_LineItemP_PartP::Clear();
    }
    if (has_supplierp()) {
      if (supplierp_ != NULL) supplierp_->::proto::OrderP_LineItemP_SupplierP::Clear();
    }
    orderkey_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderP_LineItemP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 lineNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linenumber_)));
          set_has_linenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_quantity;
        break;
      }

      // required double quantity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_extendedPrice;
        break;
      }

      // required double extendedPrice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_extendedPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &extendedprice_)));
          set_has_extendedprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_discount;
        break;
      }

      // required double discount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_discount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &discount_)));
          set_has_discount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_tax;
        break;
      }

      // required double tax = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_tax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tax_)));
          set_has_tax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_returnFlag;
        break;
      }

      // required string returnFlag = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_returnFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_returnflag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->returnflag().data(), this->returnflag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_lineStatus;
        break;
      }

      // required string lineStatus = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lineStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linestatus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->linestatus().data(), this->linestatus().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_shipDate;
        break;
      }

      // required string shipDate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shipDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shipdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shipdate().data(), this->shipdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_commitDate;
        break;
      }

      // required string commitDate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commitDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commitdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->commitdate().data(), this->commitdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_receiptDate;
        break;
      }

      // required string receiptDate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receiptDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receiptdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receiptdate().data(), this->receiptdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_shipinStruct;
        break;
      }

      // required string shipinStruct = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shipinStruct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shipinstruct()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shipinstruct().data(), this->shipinstruct().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_shipMode;
        break;
      }

      // required string shipMode = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shipMode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shipmode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shipmode().data(), this->shipmode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_comment;
        break;
      }

      // required string comment = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_partP;
        break;
      }

      // required .proto.OrderP.LineItemP.PartP partP = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_supplierP;
        break;
      }

      // required .proto.OrderP.LineItemP.SupplierP supplierP = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_supplierP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_supplierp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_orderKey;
        break;
      }

      // required int32 orderKey = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orderKey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderkey_)));
          set_has_orderkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_name;
        break;
      }

      // required string name = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderP_LineItemP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 lineNumber = 1;
  if (has_linenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->linenumber(), output);
  }

  // required double quantity = 2;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->quantity(), output);
  }

  // required double extendedPrice = 3;
  if (has_extendedprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->extendedprice(), output);
  }

  // required double discount = 4;
  if (has_discount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->discount(), output);
  }

  // required double tax = 5;
  if (has_tax()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->tax(), output);
  }

  // required string returnFlag = 6;
  if (has_returnflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->returnflag().data(), this->returnflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->returnflag(), output);
  }

  // required string lineStatus = 7;
  if (has_linestatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->linestatus().data(), this->linestatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->linestatus(), output);
  }

  // required string shipDate = 8;
  if (has_shipdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shipdate().data(), this->shipdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->shipdate(), output);
  }

  // required string commitDate = 9;
  if (has_commitdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commitdate().data(), this->commitdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->commitdate(), output);
  }

  // required string receiptDate = 10;
  if (has_receiptdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiptdate().data(), this->receiptdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->receiptdate(), output);
  }

  // required string shipinStruct = 11;
  if (has_shipinstruct()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shipinstruct().data(), this->shipinstruct().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->shipinstruct(), output);
  }

  // required string shipMode = 12;
  if (has_shipmode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shipmode().data(), this->shipmode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->shipmode(), output);
  }

  // required string comment = 13;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->comment(), output);
  }

  // required .proto.OrderP.LineItemP.PartP partP = 14;
  if (has_partp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->partp(), output);
  }

  // required .proto.OrderP.LineItemP.SupplierP supplierP = 15;
  if (has_supplierp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->supplierp(), output);
  }

  // required int32 orderKey = 16;
  if (has_orderkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->orderkey(), output);
  }

  // required string name = 17;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderP_LineItemP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 lineNumber = 1;
  if (has_linenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->linenumber(), target);
  }

  // required double quantity = 2;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->quantity(), target);
  }

  // required double extendedPrice = 3;
  if (has_extendedprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->extendedprice(), target);
  }

  // required double discount = 4;
  if (has_discount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->discount(), target);
  }

  // required double tax = 5;
  if (has_tax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->tax(), target);
  }

  // required string returnFlag = 6;
  if (has_returnflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->returnflag().data(), this->returnflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->returnflag(), target);
  }

  // required string lineStatus = 7;
  if (has_linestatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->linestatus().data(), this->linestatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->linestatus(), target);
  }

  // required string shipDate = 8;
  if (has_shipdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shipdate().data(), this->shipdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->shipdate(), target);
  }

  // required string commitDate = 9;
  if (has_commitdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commitdate().data(), this->commitdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->commitdate(), target);
  }

  // required string receiptDate = 10;
  if (has_receiptdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receiptdate().data(), this->receiptdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->receiptdate(), target);
  }

  // required string shipinStruct = 11;
  if (has_shipinstruct()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shipinstruct().data(), this->shipinstruct().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->shipinstruct(), target);
  }

  // required string shipMode = 12;
  if (has_shipmode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shipmode().data(), this->shipmode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->shipmode(), target);
  }

  // required string comment = 13;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->comment(), target);
  }

  // required .proto.OrderP.LineItemP.PartP partP = 14;
  if (has_partp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->partp(), target);
  }

  // required .proto.OrderP.LineItemP.SupplierP supplierP = 15;
  if (has_supplierp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->supplierp(), target);
  }

  // required int32 orderKey = 16;
  if (has_orderkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->orderkey(), target);
  }

  // required string name = 17;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderP_LineItemP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 lineNumber = 1;
    if (has_linenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linenumber());
    }

    // required double quantity = 2;
    if (has_quantity()) {
      total_size += 1 + 8;
    }

    // required double extendedPrice = 3;
    if (has_extendedprice()) {
      total_size += 1 + 8;
    }

    // required double discount = 4;
    if (has_discount()) {
      total_size += 1 + 8;
    }

    // required double tax = 5;
    if (has_tax()) {
      total_size += 1 + 8;
    }

    // required string returnFlag = 6;
    if (has_returnflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->returnflag());
    }

    // required string lineStatus = 7;
    if (has_linestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->linestatus());
    }

    // required string shipDate = 8;
    if (has_shipdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shipdate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string commitDate = 9;
    if (has_commitdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commitdate());
    }

    // required string receiptDate = 10;
    if (has_receiptdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receiptdate());
    }

    // required string shipinStruct = 11;
    if (has_shipinstruct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shipinstruct());
    }

    // required string shipMode = 12;
    if (has_shipmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shipmode());
    }

    // required string comment = 13;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // required .proto.OrderP.LineItemP.PartP partP = 14;
    if (has_partp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partp());
    }

    // required .proto.OrderP.LineItemP.SupplierP supplierP = 15;
    if (has_supplierp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->supplierp());
    }

    // required int32 orderKey = 16;
    if (has_orderkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderkey());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string name = 17;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderP_LineItemP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderP_LineItemP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderP_LineItemP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderP_LineItemP::MergeFrom(const OrderP_LineItemP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_linenumber()) {
      set_linenumber(from.linenumber());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_extendedprice()) {
      set_extendedprice(from.extendedprice());
    }
    if (from.has_discount()) {
      set_discount(from.discount());
    }
    if (from.has_tax()) {
      set_tax(from.tax());
    }
    if (from.has_returnflag()) {
      set_returnflag(from.returnflag());
    }
    if (from.has_linestatus()) {
      set_linestatus(from.linestatus());
    }
    if (from.has_shipdate()) {
      set_shipdate(from.shipdate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_commitdate()) {
      set_commitdate(from.commitdate());
    }
    if (from.has_receiptdate()) {
      set_receiptdate(from.receiptdate());
    }
    if (from.has_shipinstruct()) {
      set_shipinstruct(from.shipinstruct());
    }
    if (from.has_shipmode()) {
      set_shipmode(from.shipmode());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_partp()) {
      mutable_partp()->::proto::OrderP_LineItemP_PartP::MergeFrom(from.partp());
    }
    if (from.has_supplierp()) {
      mutable_supplierp()->::proto::OrderP_LineItemP_SupplierP::MergeFrom(from.supplierp());
    }
    if (from.has_orderkey()) {
      set_orderkey(from.orderkey());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderP_LineItemP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderP_LineItemP::CopyFrom(const OrderP_LineItemP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderP_LineItemP::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;

  if (has_partp()) {
    if (!this->partp().IsInitialized()) return false;
  }
  if (has_supplierp()) {
    if (!this->supplierp().IsInitialized()) return false;
  }
  return true;
}

void OrderP_LineItemP::Swap(OrderP_LineItemP* other) {
  if (other != this) {
    std::swap(linenumber_, other->linenumber_);
    std::swap(quantity_, other->quantity_);
    std::swap(extendedprice_, other->extendedprice_);
    std::swap(discount_, other->discount_);
    std::swap(tax_, other->tax_);
    std::swap(returnflag_, other->returnflag_);
    std::swap(linestatus_, other->linestatus_);
    std::swap(shipdate_, other->shipdate_);
    std::swap(commitdate_, other->commitdate_);
    std::swap(receiptdate_, other->receiptdate_);
    std::swap(shipinstruct_, other->shipinstruct_);
    std::swap(shipmode_, other->shipmode_);
    std::swap(comment_, other->comment_);
    std::swap(partp_, other->partp_);
    std::swap(supplierp_, other->supplierp_);
    std::swap(orderkey_, other->orderkey_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderP_LineItemP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderP_LineItemP_descriptor_;
  metadata.reflection = OrderP_LineItemP_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int OrderP::kOrderKeyFieldNumber;
const int OrderP::kCustKeyFieldNumber;
const int OrderP::kOrderStatusFieldNumber;
const int OrderP::kTotalPriceFieldNumber;
const int OrderP::kOrderDateFieldNumber;
const int OrderP::kOrderPriorityFieldNumber;
const int OrderP::kClerkFieldNumber;
const int OrderP::kShipPriorityFieldNumber;
const int OrderP::kCommentFieldNumber;
const int OrderP::kLineItemFieldNumber;
#endif  // !_MSC_VER

OrderP::OrderP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderP::InitAsDefaultInstance() {
}

OrderP::OrderP(const OrderP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderP::SharedCtor() {
  _cached_size_ = 0;
  orderkey_ = 0;
  custkey_ = 0;
  orderstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  totalprice_ = 0;
  orderdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderpriority_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clerk_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shippriority_ = 0;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderP::~OrderP() {
  SharedDtor();
}

void OrderP::SharedDtor() {
  if (orderstatus_ != &::google::protobuf::internal::kEmptyString) {
    delete orderstatus_;
  }
  if (orderdate_ != &::google::protobuf::internal::kEmptyString) {
    delete orderdate_;
  }
  if (orderpriority_ != &::google::protobuf::internal::kEmptyString) {
    delete orderpriority_;
  }
  if (clerk_ != &::google::protobuf::internal::kEmptyString) {
    delete clerk_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void OrderP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderP_descriptor_;
}

const OrderP& OrderP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OrderP_2eproto();
  return *default_instance_;
}

OrderP* OrderP::default_instance_ = NULL;

OrderP* OrderP::New() const {
  return new OrderP;
}

void OrderP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    orderkey_ = 0;
    custkey_ = 0;
    if (has_orderstatus()) {
      if (orderstatus_ != &::google::protobuf::internal::kEmptyString) {
        orderstatus_->clear();
      }
    }
    totalprice_ = 0;
    if (has_orderdate()) {
      if (orderdate_ != &::google::protobuf::internal::kEmptyString) {
        orderdate_->clear();
      }
    }
    if (has_orderpriority()) {
      if (orderpriority_ != &::google::protobuf::internal::kEmptyString) {
        orderpriority_->clear();
      }
    }
    if (has_clerk()) {
      if (clerk_ != &::google::protobuf::internal::kEmptyString) {
        clerk_->clear();
      }
    }
    shippriority_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
  }
  lineitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 orderKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderkey_)));
          set_has_orderkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_custKey;
        break;
      }

      // required int32 custKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_custKey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &custkey_)));
          set_has_custkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_orderStatus;
        break;
      }

      // required string orderStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderstatus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderstatus().data(), this->orderstatus().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_totalPrice;
        break;
      }

      // required double totalPrice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_totalPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totalprice_)));
          set_has_totalprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_orderDate;
        break;
      }

      // required string orderDate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderdate().data(), this->orderdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_orderPriority;
        break;
      }

      // required string orderPriority = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderPriority:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderpriority()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderpriority().data(), this->orderpriority().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_clerk;
        break;
      }

      // required string clerk = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clerk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clerk()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clerk().data(), this->clerk().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_shipPriority;
        break;
      }

      // required int32 shipPriority = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shipPriority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shippriority_)));
          set_has_shippriority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_comment;
        break;
      }

      // required string comment = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_lineItem;
        break;
      }

      // repeated .proto.OrderP.LineItemP lineItem = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lineItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lineitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_lineItem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 orderKey = 1;
  if (has_orderkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->orderkey(), output);
  }

  // required int32 custKey = 2;
  if (has_custkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->custkey(), output);
  }

  // required string orderStatus = 3;
  if (has_orderstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderstatus().data(), this->orderstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->orderstatus(), output);
  }

  // required double totalPrice = 4;
  if (has_totalprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->totalprice(), output);
  }

  // required string orderDate = 5;
  if (has_orderdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderdate().data(), this->orderdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->orderdate(), output);
  }

  // required string orderPriority = 6;
  if (has_orderpriority()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderpriority().data(), this->orderpriority().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->orderpriority(), output);
  }

  // required string clerk = 7;
  if (has_clerk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clerk().data(), this->clerk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->clerk(), output);
  }

  // required int32 shipPriority = 8;
  if (has_shippriority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->shippriority(), output);
  }

  // required string comment = 9;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->comment(), output);
  }

  // repeated .proto.OrderP.LineItemP lineItem = 10;
  for (int i = 0; i < this->lineitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->lineitem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 orderKey = 1;
  if (has_orderkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->orderkey(), target);
  }

  // required int32 custKey = 2;
  if (has_custkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->custkey(), target);
  }

  // required string orderStatus = 3;
  if (has_orderstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderstatus().data(), this->orderstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orderstatus(), target);
  }

  // required double totalPrice = 4;
  if (has_totalprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->totalprice(), target);
  }

  // required string orderDate = 5;
  if (has_orderdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderdate().data(), this->orderdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->orderdate(), target);
  }

  // required string orderPriority = 6;
  if (has_orderpriority()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderpriority().data(), this->orderpriority().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->orderpriority(), target);
  }

  // required string clerk = 7;
  if (has_clerk()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clerk().data(), this->clerk().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->clerk(), target);
  }

  // required int32 shipPriority = 8;
  if (has_shippriority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->shippriority(), target);
  }

  // required string comment = 9;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->comment(), target);
  }

  // repeated .proto.OrderP.LineItemP lineItem = 10;
  for (int i = 0; i < this->lineitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->lineitem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 orderKey = 1;
    if (has_orderkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderkey());
    }

    // required int32 custKey = 2;
    if (has_custkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->custkey());
    }

    // required string orderStatus = 3;
    if (has_orderstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderstatus());
    }

    // required double totalPrice = 4;
    if (has_totalprice()) {
      total_size += 1 + 8;
    }

    // required string orderDate = 5;
    if (has_orderdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderdate());
    }

    // required string orderPriority = 6;
    if (has_orderpriority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderpriority());
    }

    // required string clerk = 7;
    if (has_clerk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clerk());
    }

    // required int32 shipPriority = 8;
    if (has_shippriority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shippriority());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string comment = 9;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

  }
  // repeated .proto.OrderP.LineItemP lineItem = 10;
  total_size += 1 * this->lineitem_size();
  for (int i = 0; i < this->lineitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lineitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderP::MergeFrom(const OrderP& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineitem_.MergeFrom(from.lineitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderkey()) {
      set_orderkey(from.orderkey());
    }
    if (from.has_custkey()) {
      set_custkey(from.custkey());
    }
    if (from.has_orderstatus()) {
      set_orderstatus(from.orderstatus());
    }
    if (from.has_totalprice()) {
      set_totalprice(from.totalprice());
    }
    if (from.has_orderdate()) {
      set_orderdate(from.orderdate());
    }
    if (from.has_orderpriority()) {
      set_orderpriority(from.orderpriority());
    }
    if (from.has_clerk()) {
      set_clerk(from.clerk());
    }
    if (from.has_shippriority()) {
      set_shippriority(from.shippriority());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderP::CopyFrom(const OrderP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderP::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  for (int i = 0; i < lineitem_size(); i++) {
    if (!this->lineitem(i).IsInitialized()) return false;
  }
  return true;
}

void OrderP::Swap(OrderP* other) {
  if (other != this) {
    std::swap(orderkey_, other->orderkey_);
    std::swap(custkey_, other->custkey_);
    std::swap(orderstatus_, other->orderstatus_);
    std::swap(totalprice_, other->totalprice_);
    std::swap(orderdate_, other->orderdate_);
    std::swap(orderpriority_, other->orderpriority_);
    std::swap(clerk_, other->clerk_);
    std::swap(shippriority_, other->shippriority_);
    std::swap(comment_, other->comment_);
    lineitem_.Swap(&other->lineitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderP_descriptor_;
  metadata.reflection = OrderP_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
